openapi: 3.0.0
info:
  title: Processadora paySmart - API de integração com emissores
  description: API de integração com emissores paySmart contém funções que compreendem
    desde a solicitação de inclusão de novas contas e cartões, pedidos de crédito,
    funções de atendimento e intercâmbio, associação de CPF à conta e cartão, bloqueio
    e desbloqueio de cartões até o envio de extrato mensal.
  contact:
    url: https://paysmart.com.br/
    email: atendimento@paysmart.com.br
  license:
    name: Documento confidencial conforme NDA assinado entre emissor e paySmart
    url: https://paysmart.com.br/
  version: v1
servers:
- url: https://virtserver.swaggerhub.com/paySmart/ps-processadora/v1
  description: SwaggerHub API Auto Mocking
security:
- api_key: []
tags:
- name: accounts
  description: Solicitações de criação de novas contas e portadores, pedidos de emissão
    de novos cartões e envio de créditos para cartões.
- name: cards
  description: Operações relacionadas a cartões de pagamento existentes, como bloqueio,
    cancelamento e recuperação de status.
- name: transactions
  description: Operações para registro de transações como carga de crédito e transações
    de ajuste, além de busca e listagem de transações.
- name: disputes
  description: Operações relacionadas a questionamento de cobranças pelo portador
    do cartão.
- name: installments
  description: Operações relacionadas a parcelamentos. Consulta e antecipação do pagamento.
- name: qrcode
  description: Operações para pagamento usando QR Code.
- name: Dynamic Provisioning Account
  description: Operações relacionadas ao saldo e aportes feitos na conta colchão do
    subemissor.
paths:
  /dynamicProvisioningAccount/balance:
    get:
      tags:
      - Dynamic Provisioning Account
      summary: Solicita informação de saldo na conta colchão.
      operationId: get_balance
      responses:
        "200":
          description: Lista de contas retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.dynamic_provisioning_account_controller
  /dynamicProvisioningAccount/balance/credits:
    get:
      tags:
      - Dynamic Provisioning Account
      summary: Obtém uma lista de aportes realizados nos dias especificados.
      operationId: get_credits
      parameters:
      - name: beginning_date
        in: query
        description: Data indicando o primeiro dia cujos dados devem ser retornados.
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: Data no formato yyyy-MM-DD
          example: 2020-07-02
      - name: end_date
        in: query
        description: Data indicando o último dia cujos dados devem ser retornados.
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: Data no formato yyyy-MM-DD
          example: 2020-07-09
      responses:
        "200":
          description: Balanço obtido com sucess!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditListMattress'
        "400":
          description: Erro na execução da operação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.dynamic_provisioning_account_controller
  /accounts:
    get:
      tags:
      - accounts
      summary: Lista todas as contas de um emissor de acordo com filtros estabelecidos.
      operationId: find_accounts
      parameters:
      - name: limit
        in: query
        description: Número limite de objetos retornados. O valor deve ser entre 1
          e 100.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          example: 10
          default: 10
      - name: starting_after
        in: query
        description: Um cursor para uso em paginação. {starting_after} é o identificador
          único do objeto a partir do qual se quer listar. Por exemplo, se houve um
          retorno de uma lista de 100 objetos para esta chamada sendo que o último
          possui identificador "obj1234", para se obter a página use "starting_after=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: ending_before
        in: query
        description: Um cursor para uso em paginação. {ending_before} é o identificador
          único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
          se houve um retorno de uma lista de 100 objetos para esta chamada sendo
          que o primeiro possui identificador "obj1234", para se obter a página anterior
          use "ending_before=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: identity_document_number
        in: query
        description: No Brasil, usar CPF ou CNPJ.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: ^\d{11,14}$
          example: "03873703805"
      - name: full_name
        in: query
        description: Nome completo do titular.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Fulano da Silva
      - name: ps_product_code
        in: query
        description: Código do produto fornecido pela paySmart.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "020101"
      - name: account_status
        in: query
        description: Status da conta.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/AccountStatus'
      - name: issuer_id
        in: query
        description: Identificador da conta fornecido pelo emissor na sua criação.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
      - name: included_since
        in: query
        description: Procura contas incluídas depois dessa data.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
      responses:
        "200":
          description: Lista de contas retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "503":
          description: Sistema Indisponível.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemDownError'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
    post:
      tags:
      - accounts
      summary: Solicita nova conta paySmart.
      operationId: add_account
      parameters:
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações relacionadas à conta, para inclusão na processadora
          paySmart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountRequest'
        required: true
      responses:
        "200":
          description: Solicitação de conta registrada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}:
    get:
      tags:
      - accounts
      summary: Recupera informações sobre uma conta.
      description: Em uma operação de atendimento ao portador, essa função pode ser
        utilizada para retornar detalhes da conta, a situação da conta e sua lista
        de cartões.
      operationId: get_account
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Conta recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
    put:
      tags:
      - accounts
      summary: Atualiza informações de conta.
      description: implementar
      operationId: update_account
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      requestBody:
        description: Informações relacionadas à conta e produto para atualização na
          processadora paySmart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
        required: true
      responses:
        "200":
          description: Conta atualizada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/balance:
    get:
      tags:
      - accounts
      summary: Recupera informações sobre o saldo e limites de uma conta.
      description: Retorna dados de saldo e limite da conta. Importante para mostar
        essas informações par o titular.
      operationId: get_account_balance
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Saldo recuperado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalance'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/statements/closed:
    get:
      tags:
      - accounts
      - statements
      summary: Recupera informações sobre todas as faturas que fecharam em um dia
        específico.
      description: Retorna todos os dados das faturas que que fecharam em um dia específico,
        passado como parâmetro.
      operationId: get_account_statements_closed
      parameters:
      - name: closing_date_query
        in: query
        description: Data indicando que só faturas que fecharam nessa data devem ser
          retornadas. No formato dd/MM/yyyy.
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: Data de emisão no formato dd\/MM\/yyyy
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 21/07/2019
      responses:
        "200":
          description: Fatura recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementList'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/statements/open:
    get:
      tags:
      - accounts
      - statements
      summary: Recupera informações sobre a fatura atualmente aberta para essa conta.
      description: Retorna dados da fatura atualmente aberta. Até o fechamento dessa
        fatura ela pode continuar sendo atualizada.
      operationId: get_account_statement_open
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Fatura recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenStatement'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "404":
          description: Não existe faturas para essa conta.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/statements/closed:
    get:
      tags:
      - accounts
      - statements
      summary: Recupera informações sobre a fatura fechada mais recente para essa
        conta.
      description: Retorna todos os dados da fatura fechada mais recente. Uma vez
        que a fatura seja fechada os dados dela não mudam mais.
      operationId: get_account_statement_closed
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Fatura recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
        "204":
          description: Não existem lançamentos na fatura desse mês.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "404":
          description: Não existe faturas para essa conta.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/statements/closed/installmentOptions:
    get:
      tags:
      - accounts
      - statements
      - installments
      summary: Recupera informações sobre possibilidade de parcelamento de saldo devedor
        que já completou 30 dias de rotativo.
      description: Retorna todos os dados sobre as possibilidades de parcelamento
        de qualquer saldo devedor que já esteja completando 30 dias no crédito rotativo.
      operationId: get_account_statement_closed_installment_options
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Opções de parcelamento recuperadas com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentOptions'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/statements/closed/installmentsRequest:
    post:
      tags:
      - accounts
      - installments
      - statements
      summary: Pedido de parcelamento de saldo devedor.
      description: Cria um pedido de parcelamento do saldo devedor, de acordo com
        uma das opções préviamente definidas.
      operationId: installment_request
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados da opção de parcelamento sendo requisitada.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallmentRequest'
        required: true
      responses:
        "200":
          description: Pedido enviado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "404":
          description: Conta não encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "412":
          description: Parcelamento pedido não é uma das opções de parcelamento disponíveis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/statements/future:
    get:
      tags:
      - accounts
      - statements
      summary: Recupera informações sobre todas as faturas futuras que já tenham algum
        lançamento agendado para essa conta.
      description: Retorna todos os dados das faturas futuras (faturas com vencimento
        posterior ao da fatura atualmente aberta) que tenham algum lançamento já agendado
        (parcelas de compras parceladas).
      operationId: get_account_statements_future
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Fatura recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FutureStatementList'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/statements:
    get:
      tags:
      - accounts
      - statements
      summary: Recupera informações sobre a fatura de um mês em particular. Pode ser
        usado para pesquisar faturas fechadas.
      description: Retorna todos os dados da fatura de um mês em particular. Pode
        ser usado para pesquisar faturas fechadas. Para acessar a fatura aberta atual,
        ou para verificar lançamentos em faturas futuras, é preciso usar os métodos
        específicos para essas faturas.
      operationId: get_account_statements
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: month
        in: query
        description: Data indicando que um mês, no formato MM/yyyy.
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: Data no formato MM/yyyy
          format: ^(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 07/2019
      responses:
        "200":
          description: Fatura recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
        "204":
          description: Não existem lançamentos na fatura desse mês.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "404":
          description: Fatura não encontrada para esse mês.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/installments/future:
    get:
      tags:
      - accounts
      - installments
      summary: Recupera informações sobre compras parceladas que ainda tem parcelas
        no futuro.
      description: Retorna todos os dados de compras parceladas que ainda tenham parcelas
        que irão vencer no futuro.
      operationId: get_future_installments
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Parcelamentos recuperados com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllInstallmentPurchase'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/installments/advancePaymentRequest:
    post:
      tags:
      - accounts
      - installments
      summary: Pedido de liquidação antecipada de parcelas futuras.
      description: Cria um pedido de liquidação antecipada de um número de parcelas
        futuras de uma determinada compra.
      operationId: advance_payment
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados para a liquidação antecipada, incluindo a compra e quantidade
          de faturas.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancePaymentRequest'
        required: true
      responses:
        "200":
          description: Pedido enviado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "404":
          description: Transação ou conta não encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "412":
          description: Transação não tem o número de parcelas futuras necessárias
            para o pedido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/newCardRequest:
    post:
      tags:
      - accounts
      - cards
      summary: Requisita um novo cartão associado a conta.
      description: Passa os dados necessários para o requerimento de um novo cartão
        associado a essa conta. O cartão pode ser par o titular ou um cartão adicional.
      operationId: request_new_card
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados para a requisição de novo cartão, incluindo todos os dados
          do portador.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCardRequest'
        required: true
      responses:
        "200":
          description: Cartão requisitado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewCardrequestCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "404":
          description: Erro na execução da operação. Cartão não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "412":
          description: Erro na execução da operação. Cartão já está associado com
            um portador.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/cancelAccount:
    post:
      tags:
      - accounts
      summary: Cancela uma conta e cartão(ões) associado(s).
      description: Solicitação de cancelamento de conta e cartão. Encerra a conta
        e os cartões vinculados à conta SEM EMISSÃO DE NOVA VIA DE CARTÃO.
      operationId: cancel_account
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações relacionadas ao cancelamento da conta.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelAccountRequest'
        required: true
      responses:
        "200":
          description: Transação registrada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCancelledSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/transactions:
    get:
      tags:
      - accounts
      - transactions
      summary: Lista transações a partir de filtros especificados.
      operationId: find_transactions_by_account
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: limit
        in: query
        description: Número limite de objetos retornados. O valor deve ser entre 1
          e 100.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          example: 10
          default: 10
      - name: starting_after
        in: query
        description: Um cursor para uso em paginação. {starting_after} é o identificador
          único do objeto a partir do qual se quer listar. Por exemplo, se houve um
          retorno de uma lista de 100 objetos para esta chamada sendo que o último
          possui identificador "obj1234", para se obter a página use "starting_after=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: ending_before
        in: query
        description: Um cursor para uso em paginação. {ending_before} é o identificador
          único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
          se houve um retorno de uma lista de 100 objetos para esta chamada sendo
          que o primeiro possui identificador "obj1234", para se obter a página anterior
          use "ending_before=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: beginning_date_time
        in: query
        description: Data e hora para iniciar procura.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
      - name: ending_date_time
        in: query
        description: Data e hora para parar procura.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
      - name: transaction_type
        in: query
        description: Tipo das transações a serem retornadas.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/TransactionType'
      - name: transaction_status
        in: query
        description: Status das transações a serem retornadas.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/TransactionStatus'
      - name: transaction_approved
        in: query
        description: Se a transação foi aprovada pelo autorizador.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
      - name: transaction_denial_code
        in: query
        description: Transações negadas no autorizador com um código específico.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: ^[a-zA-Z0-9][a-zA-Z0-9]$
          example: "true"
      - name: minimum_amount
        in: query
        description: Valor mínimo, omitindo a vírgula. Por exemplo, R$ 1,23 ficaria
          "amount":123
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          example: 123
      - name: max_amount
        in: query
        description: Valor máximo, omitindo a vírgula. Por exemplo, R$ 1,23 ficaria
          "amount":123
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          example: 123
      - name: transaction_mode
        in: query
        description: Modo da transação.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/EntryMode'
      responses:
        "200":
          description: Lista de transações retornada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /accounts/{accountId}/transactions/credits:
    get:
      tags:
      - accounts
      - transactions
      summary: Lista cargas de créditos agendadas mas ainda não executadas.
      operationId: find_credits_by_account
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: limit
        in: query
        description: Número limite de objetos retornados. O valor deve ser entre 1
          e 100.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          example: 10
          default: 10
      - name: starting_after
        in: query
        description: Um cursor para uso em paginação. {starting_after} é o identificador
          único do objeto a partir do qual se quer listar. Por exemplo, se houve um
          retorno de uma lista de 100 objetos para esta chamada sendo que o último
          possui identificador "obj1234", para se obter a página use "starting_after=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: ending_before
        in: query
        description: Um cursor para uso em paginação. {ending_before} é o identificador
          único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
          se houve um retorno de uma lista de 100 objetos para esta chamada sendo
          que o primeiro possui identificador "obj1234", para se obter a página anterior
          use "ending_before=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      responses:
        "200":
          description: Lista de créditos sações retornada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
    post:
      tags:
      - accounts
      - transactions
      summary: Registra uma nova carga de créditos com data de efetivação.
      description: Solicita registro de uma nova carga de créditos para a conta com
        identificador {accountId}. A carga de crédito tem uma data de efetivação.
        A data pode ser no dia atual, no futuro (crédito agendado) ou no passado (indicando
        um pagamento recebido anteriormente).
      operationId: add_credit
      parameters:
      - name: accountId
        in: path
        description: Identificador da conta.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações relacionadas à carga de créditos para inclusão na
          processadora paySmart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCreditRequest'
        required: true
      responses:
        "200":
          description: Carge de créditos registrada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.accounts_controller
  /transactions:
    get:
      tags:
      - transactions
      summary: Lista transações a partir de filtros especificados.
      operationId: find_transactions
      parameters:
      - name: limit
        in: query
        description: Número limite de objetos retornados. O valor deve ser entre 1
          e 100.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          example: 10
          default: 10
      - name: starting_after
        in: query
        description: Um cursor para uso em paginação. {starting_after} é o identificador
          único do objeto a partir do qual se quer listar. Por exemplo, se houve um
          retorno de uma lista de 100 objetos para esta chamada sendo que o último
          possui identificador "obj1234", para se obter a página use "starting_after=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: ending_before
        in: query
        description: Um cursor para uso em paginação. {ending_before} é o identificador
          único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
          se houve um retorno de uma lista de 100 objetos para esta chamada sendo
          que o primeiro possui identificador "obj1234", para se obter a página anterior
          use "ending_before=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: beginning_date_time
        in: query
        description: Data e hora para iniciar procura.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
      - name: ending_date_time
        in: query
        description: Data e hora para parar procura.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
      - name: transaction_type
        in: query
        description: Tipo das transações a serem retornadas.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/TransactionType'
      - name: transaction_status
        in: query
        description: Status das transações a serem retornadas.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/TransactionStatus'
      - name: transaction_approved
        in: query
        description: Se a transação foi aprovada pelo autorizador.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
      - name: transaction_denial_code
        in: query
        description: Transações negadas no autorizador com um código específico.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: ^[a-zA-Z0-9][a-zA-Z0-9]$
          example: "true"
      - name: minimum_amount
        in: query
        description: Valor mínimo, omitindo a vírgula. Por exemplo, R$ 1,23 ficaria
          "amount":123
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          example: 123
      - name: max_amount
        in: query
        description: Valor máximo, omitindo a vírgula. Por exemplo, R$ 1,23 ficaria
          "amount":123
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          example: 123
      - name: transaction_mode
        in: query
        description: Modo da transação.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/EntryMode'
      responses:
        "200":
          description: Lista de transações retornada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.transactions_controller
  /transactions/{transactionId}:
    get:
      tags:
      - transactions
      summary: Recupera informações sobre uma transação.
      description: Em uma operação de atendimento ao portador, essa função pode ser
        utilizada para retornar detalhes da transação.
      operationId: get_transaction
      parameters:
      - name: transactionId
        in: path
        description: Identificador da transação.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
      responses:
        "200":
          description: Transação recuperada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.transactions_controller
  /disputes:
    get:
      tags:
      - disputes
      summary: Recupera uma lista de disputas do emissor de acordo com os filtros
        definidos.
      operationId: find_disputes
      parameters:
      - name: limit
        in: query
        description: Número limite de objetos retornados. O valor deve ser entre 1
          e 100.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          example: 10
          default: 10
      - name: starting_after
        in: query
        description: Um cursor para uso em paginação. {starting_after} é o identificador
          único do objeto a partir do qual se quer listar. Por exemplo, se houve um
          retorno de uma lista de 100 objetos para esta chamada sendo que o último
          possui identificador "obj1234", para se obter a página use "starting_after=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: ending_before
        in: query
        description: Um cursor para uso em paginação. {ending_before} é o identificador
          único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
          se houve um retorno de uma lista de 100 objetos para esta chamada sendo
          que o primeiro possui identificador "obj1234", para se obter a página anterior
          use "ending_before=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: dispute_reason
        in: query
        description: Código do motivo das disputas a serem retornadas.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/disputeCode'
      - name: dispute_status
        in: query
        description: Status das disputas a serem retornadas.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/DisputeStatus'
      - name: beginning_date
        in: query
        description: Data indicando o primeiro dia cujos dados devem ser retornados.
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: Data no formato yyyy-MM-DD
          example: 2020-07-02
      - name: ending_date
        in: query
        description: Data indicando o último dia cujos dados devem ser retornados.
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: Data no formato yyyy-MM-DD
          example: 2020-07-09
      responses:
        "200":
          description: Lista de disputas retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.disputes_controller
    post:
      tags:
      - disputes
      summary: Registra uma disputa para questionar a validade de uma transação.
      operationId: add_dispute
      parameters:
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados do registro de disputa.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeRequest'
        required: true
      responses:
        "200":
          description: Disputa registrada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.disputes_controller
  /disputes/{disputeId}:
    get:
      tags:
      - disputes
      summary: Recupera informações de uma disputa.
      operationId: get_dispute
      parameters:
      - name: disputeId
        in: path
        description: Identificador da disputa.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 2b0dac66-79f9-4d9d-a48b-a91e9921a8d3
      responses:
        "200":
          description: Dados da disputa com {disputeId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.disputes_controller
  /disputes/{disputeId}/response:
    post:
      tags:
      - disputes
      summary: Responde a um parecer negativo da bandeira/credenciador. A resposta
        pode aceitar o parcer e desistir da disputa ou pode discordar e passar a disputa
        para a próxima fase.
      operationId: repond_dispute
      parameters:
      - name: disputeId
        in: path
        description: Identificador da disputa.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 2b0dac66-79f9-4d9d-a48b-a91e9921a8d3
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Uma resposta a uma negativa por parte do credenciador, indicado
          aceitação ou continuação do processo de disputa e incluidno motivos no caso
          de continuação.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeResponseRequest'
        required: true
      responses:
        "200":
          description: Resposta registrada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeResponseCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.disputes_controller
  /disputes/{disputeId}/undo:
    post:
      tags:
      - disputes
      summary: Desiste de uma disputa e envia uma reversão dela.
      operationId: undo_dispute
      parameters:
      - name: disputeId
        in: path
        description: Identificador da disputa.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 2b0dac66-79f9-4d9d-a48b-a91e9921a8d3
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados para reversão do pedido de disputa.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeReversalRequest'
        required: true
      responses:
        "200":
          description: Pedido de reversão criado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeReversalCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.disputes_controller
  /cards:
    get:
      tags:
      - cards
      summary: Recupera uma lista de cartões do emissor de acordo com os filtros definidos.
      operationId: find_cards
      parameters:
      - name: limit
        in: query
        description: Número limite de objetos retornados. O valor deve ser entre 1
          e 100.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          example: 10
          default: 10
      - name: starting_after
        in: query
        description: Um cursor para uso em paginação. {starting_after} é o identificador
          único do objeto a partir do qual se quer listar. Por exemplo, se houve um
          retorno de uma lista de 100 objetos para esta chamada sendo que o último
          possui identificador "obj1234", para se obter a página use "starting_after=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: ending_before
        in: query
        description: Um cursor para uso em paginação. {ending_before} é o identificador
          único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
          se houve um retorno de uma lista de 100 objetos para esta chamada sendo
          que o primeiro possui identificador "obj1234", para se obter a página anterior
          use "ending_before=obj1234".
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
      - name: issuer_id
        in: query
        description: Identificador do cartão fornecido pelo emissor na sua criação.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
      - name: identity_document_number
        in: query
        description: No Brasil, usar CPF ou CNPJ.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: ^\d{11,14}$
          example: "03873703805"
      - name: pan_last_4_digits
        in: query
        description: Últimos 4 dígitos do cartão.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: ^\d{4}$
          example: "1234"
      - name: issued_on_or_after_date
        in: query
        description: Data indicando que só cartões emitidos depois dessa data vão
          ser retornados
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: Data de emisão no formato dd\/MM\/yyyy
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 21/07/2019
      responses:
        "200":
          description: Lista de cartões retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/newAnonymousCardRequest:
    post:
      tags:
      - cards
      summary: Requisita um novo cartão "não identificado" que será associado a um
        usuário em um ponto futuro.
      description: Passa os dados necessários para o requerimento de um novo cartão
        que não vai estar atualmente associado a um usuário.
      operationId: request_new_anonymous_card
      parameters:
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados para a requisição de novo cartão, sem dados de portador.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnonymousCardRequest'
        required: true
      responses:
        "200":
          description: Cartão requisitado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewAnonymousCardRequestCreatedSuccessfully'
        "400":
          description: Erro na execução da operação
        "500":
          description: Erro no servidor
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/bindAnonymousCardRequest:
    post:
      tags:
      - cards
      summary: Associa um cartão não identificado a uma portador.
      description: Quando emite cartões "não identificados", o emissor pode relacionar
        um cartão previamente emitido com um portador por meio desta chamada.
      operationId: bind_card_to_cardholder
      parameters:
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Dados de associação do cartão ao portador. Passar o conjunto
          de dados de embossing do cartão (PAN + CVV + data de exp)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateAnonymousCardRequest'
        required: true
      responses:
        "200":
          description: Cartão associado à conta com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BindCardResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/findByPAN:
    post:
      tags:
      - cards
      summary: Recupera uma lista de cartões do emissor pelo PAN.
      operationId: find_cards_by_pan
      requestBody:
        description: O PAN a ser procurado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindCardByPANRequest'
        required: true
      responses:
        "200":
          description: Lista de cartões retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSingleListResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}:
    get:
      tags:
      - cards
      summary: Recupera informações de um cartão.
      operationId: get_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      responses:
        "200":
          description: Dados do cartão com {cardId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
    put:
      tags:
      - cards
      summary: Atualiza informações do cartão, permitindo vincular um portador uma
        única vez.
      operationId: update_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      requestBody:
        description: Informações relacionadas ao portador para atualização na processadora
          paySmart..
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
        required: true
      responses:
        "200":
          description: Conta atualizada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardBlockResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}/virtualcards:
    post:
      tags:
      - cards
      - virtualcards
      summary: Cria um novo cartão virtual.
      operationId: create_virtual_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Especificações do cartão virtual solicitado.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualCardRequest'
        required: true
      responses:
        "200":
          description: Dados do cartão virtual criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualCardResponse'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}/virtualcards/list:
    get:
      tags:
      - cards
      - virtualcards
      summary: Lista todos os cartões virtuais para um determinado cartão real
      operationId: list_virtual_cards
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      responses:
        "200":
          description: Dados do cartão virtual criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualCardsResponse'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /virtualcards/{vCardId}:
    get:
      tags:
      - virtualcards
      summary: Lista todos os cartões virtuais para um determinado cartão real
      operationId: get_virtual_card
      parameters:
      - name: vCardId
        in: path
        description: Identificador do cartão virtual.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      responses:
        "200":
          description: Dados do cartão virtual solicitado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualCardResponse'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.virtualcards_controller
  /virtualcards/{vCardId}/cancel:
    post:
      tags:
      - virtualcards
      summary: Cancela um cartão virtual.
      operationId: cancel_virtual_card
      parameters:
      - name: vCardId
        in: path
        description: Identificador do cartão virtual.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações de cancelamento do CV.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelVirtualCardRequest'
        required: true
      responses:
        "200":
          description: Dados do cartão virtual criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelVirtualCardResponse'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.virtualcards_controller
  /cards/{cardId}/blockAndReissueCardRequest:
    post:
      tags:
      - cards
      summary: Bloqueia o cartão {cardId} e emite um novo cartão para o cliente.
      description: Atualiza a situação do cartão para bloqueado e inicia o processo
        de emissão de novo cartão para o cliente.
      operationId: block_and_reissue_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações para o bloqueio e reemissão.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBlockAndReissueRequest'
        required: true
      responses:
        "200":
          description: Dados atualizados do cartão com {cardId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardBlockAndReissueResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}/changePin:
    post:
      tags:
      - cards
      summary: Requisita uma mudança do PIN do cartão {cardId}.
      description: Requisita a mudaça do PIN de um cartão. Mudanças do PIN offline
        vão ser aplicadas na próxima transação realizada que for online e na qual
        o cartão puder receber um script de troca de PIN na resposta.
      operationId: change_pin
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações para a mudança do PIN.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinChangeRequest'
        required: true
      responses:
        "200":
          description: Requisição de mudança de PIN feita com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinChangeCreatedSuccessfully'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}/reissueCardRequest:
    post:
      tags:
      - cards
      summary: Gera nova via do cartão para o cliente.
      description: Inicia o processo de emissão de nova via do cartão para o cliente.
      operationId: reissue_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações para a emissão da nova via.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardReissueRequest'
        required: true
      responses:
        "200":
          description: Dados atualizados do cartão com {cardId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardReissueResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}/blockCardRequest:
    post:
      tags:
      - cards
      summary: Bloqueia o cartão {cardId}. Não emite outro cartão.
      description: Atualiza a situação do cartão para bloqueado.
      operationId: block_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações para o bloqueio.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBlockRequest'
        required: true
      responses:
        "200":
          description: Dados atualizados do cartão com {cardId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardBlockResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /cards/{cardId}/unblockCardRequest:
    post:
      tags:
      - cards
      summary: Desbloqueia o cartão {cardId}.
      description: Atualiza a situação do cartão para desbloqueado.
      operationId: unblock_card
      parameters:
      - name: cardId
        in: path
        description: Identificador do cartão.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
      - name: IdempotencyKey
        in: header
        description: A API suporta idempotência para que, após um erro de conexão,
          por exemplo, se possa tentar novamente requisições POST sem acidentalmente
          efetuar a mesma operação duas vezes. Para indicar uma requisição é idempotente,
          envie uma IdempotencyKey no header da requisição com uma chave única (recomendamos
          UUIDs V4).
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4dd71cca-d89a-4cc0-8e16-f524da933437
      requestBody:
        description: Informações para o desbloqueio.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUnblockRequest'
        required: true
      responses:
        "200":
          description: Dados atualizados do cartão com {cardId}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardUnblockResult'
        "400":
          description: Erro na execução da operação.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "500":
          description: Erro no servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
      x-openapi-router-controller: swagger_server.controllers.cards_controller
  /qrcode/publicKey:
    get:
      tags:
      - qrcode
      summary: Obtêm uma nova chave pública para cifrar os dados do cartão antes de
        enviar uma nova transação de QR Code.
      description: 'Chave pública para criptografar os dados do cartão  (''cardData'':
        {"cardHolder":{"card":{"pan":"6550001020301234","expiry":{"month":"01","year":"2021"},"name":"JOAO
        SILVA","csc":"123"},"cpf":"18535908005"}}) a serem enviados no pedido de pagamento.
        A chave é retornada junto com o tempo até a sua expiração, e pode ser utilizada
        mais de uma vez. É recomendado que a chave seja armazenada em back-end e sua
        validade seja controlada. A cifra utilizada é RSA/ECB/PKCS1Padding. A chave
        retornada é X509 SubjectKeyInfo no formato DER codificado em Base64.'
      operationId: get_pub_key
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "401":
          description: Unathorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessedEntity'
      x-openapi-router-controller: swagger_server.controllers.qrcode_controller
  /qrcode/payment/:
    post:
      tags:
      - qrcode
      summary: Faz um pagamento
      description: Solicitação de pagamento com o cartão
      operationId: qrcode_payment
      requestBody:
        description: Informações para o pagamento
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardParams'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "202":
          description: Accepted. Respondido quando o resultado da transação vai ser
            retornado via callback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionId'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "401":
          description: Unathorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultData'
        "412":
          description: Precondition failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailed'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessedEntity'
      x-openapi-router-controller: swagger_server.controllers.qrcode_controller
components:
  schemas:
    Balance:
      type: object
      properties:
        currentBalance:
          $ref: '#/components/schemas/Amount'
      example:
        currentBalance:
          amount: 123
          currencyCode: 986
    CreditMattress:
      required:
      - amount
      - creditReceivedDateTime
      - status
      - transactionId
      type: object
      properties:
        transactionId:
          type: string
          description: Identificador da transação atribuído pela paySmart.
          example: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
        creditReceivedDateTime:
          type: string
          description: Data e hora do recebimento da transação no serviço, no formato
            definido pela RFC 3339, seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
        creditDate:
          type: string
          description: Data da transação no formato definido pela RFC 3339, seção
            5.6.
          format: date
          example: 2017-07-21
        creditTime:
          type: string
          description: Hora da transação, sem a data
          format: ^([0-2][0-9]):([0-6][0-9]):([0-6][0-9])$
          example: 17:32:28
        amount:
          $ref: '#/components/schemas/DebitOrCreditAmount'
        status:
          type: string
          description: Status do aporte.
          enum:
          - confirmed
          - canceled
          - pending
        cancellation:
          type: boolean
          description: Indica se esse aporte é um cancelamento de outro aporte anterior.
          example: false
      example:
        creditDate: 2017-07-21T00:00:00.000+0000
        amount:
          amount: 123
          debit_or_credit: debit
          currencyCode: 986
        cancellation: false
        creditReceivedDateTime: 2017-07-21T17:32:28Z
        creditTime: 17:32:28
        transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
        status: confirmed
    disputeCode:
      type: string
      description: Código da disputa que indica o motivo de abertura.
      format: ^[0-9][0-9]$
      example: "30"
    CreditListMattress:
      type: object
      properties:
        credits:
          type: array
          description: Lista de aportes.
          items:
            $ref: '#/components/schemas/CreditMattress'
        hasMoreCredits:
          type: boolean
          description: Indica se todos os aportes do período informado foram retornados
            nessa resposta, ou se ainda existem mais aportes. Caso haja mais aportes
            é preciso fazer uma nova consulta mudando a data de início para a primeira
            data que não apareceu na lista retornada.
          example: false
      example:
        credits:
        - creditDate: 2017-07-21T00:00:00.000+0000
          amount:
            amount: 123
            debit_or_credit: debit
            currencyCode: 986
          cancellation: false
          creditReceivedDateTime: 2017-07-21T17:32:28Z
          creditTime: 17:32:28
          transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
          status: confirmed
        - creditDate: 2017-07-21T00:00:00.000+0000
          amount:
            amount: 123
            debit_or_credit: debit
            currencyCode: 986
          cancellation: false
          creditReceivedDateTime: 2017-07-21T17:32:28Z
          creditTime: 17:32:28
          transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
          status: confirmed
        hasMoreCredits: false
    DebitOrCreditAmount:
      required:
      - amount
      - currencyCode
      - debit_or_credit
      type: object
      properties:
        amount:
          type: integer
          description: Valor omitindo a vírgula. Por exemplo, R$ 1,23 ficaria "amount":123
          format: int64
          example: 123
        currencyCode:
          type: integer
          description: Código da moeda, conforme ISO-4217
          example: 986
          default: 986
        debit_or_credit:
          type: string
          description: Define se a transação deve gerar um débito ou um crédito.
          example: debit
          enum:
          - debit
          - credit
      example:
        amount: 123
        debit_or_credit: debit
        currencyCode: 986
    SystemDownError:
      required:
      - code
      - message
      type: object
      properties:
        message:
          type: string
          example: Sistema indisponível. Erro ao acessar base de dados.
        code:
          type: integer
          example: 900
    ResultData:
      required:
      - psResponseId
      - resultCode
      - resultDescription
      type: object
      properties:
        resultCode:
          type: integer
          description: Código de resultado do processamento.
        resultDescription:
          type: string
          description: Descrição textual do resultado do processamento.
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Ecoado
            conforme enviado na requisição.
        psResponseId:
          type: string
          description: Identificador único da resposta. Gerado pela paySmart.
      example:
        psResponseId: psResponseId
        resultCode: 0
        resultDescription: resultDescription
        issuerRequestId: issuerRequestId
    CardBlockAndReissueResult:
      required:
      - blocked_card
      - newCardId
      - resultData
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão bloqueado com sucesso! Processo de reemissão
              iniciado.
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        blocked_card:
          $ref: '#/components/schemas/Card'
        newCardId:
          type: string
          description: Identificador único do novo cartão. Pode ser usado para verificar
            o status da requisição e para consultar dados do cartão uma vez que ele
            tenha sido emitido.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
      example:
        resultData:
          resultCode: 0
          resultDescription: Cartão bloqueado com sucesso! Processo de reemissão iniciado.
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        blocked_card:
          product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
        newCardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
    CardReissueResult:
      required:
      - newCardId
      - resultData
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Processo de emissão de nova via iniciado.
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        newCardId:
          type: string
          description: Identificador único do novo cartão. Pode ser usado para verificar
            o status da requisição e para consultar dados do cartão uma vez que ele
            tenha sido emitido.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
      example:
        resultData:
          resultCode: 0
          resultDescription: Processo de emissão de nova via iniciado.
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        newCardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
    CardBlockResult:
      required:
      - blocked_card
      - resultData
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão bloqueado com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        blocked_card:
          $ref: '#/components/schemas/Card'
      example:
        resultData:
          resultCode: 0
          resultDescription: Cartão bloqueado com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        blocked_card:
          product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
    CardUnblockResult:
      required:
      - resultData
      - unblocked_card
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão desbloqueado com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        unblocked_card:
          $ref: '#/components/schemas/Card'
      example:
        resultData:
          resultCode: 0
          resultDescription: Cartão desbloqueado com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        unblocked_card:
          product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
    AccountCreatedSuccessfully:
      required:
      - account
      - resultData
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Registro de nova conta incluído com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        account:
          $ref: '#/components/schemas/Account'
      example:
        resultData:
          resultCode: 0
          resultDescription: Registro de nova conta incluído com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        account:
          psProductCode: "020101"
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          cards:
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          issuerAccountId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          psProductName: BANCO 1 BANDEIRA 1 PRE-PAGO
          accountOwner: ""
          inclusion_date: 2019-07-21T17:32:28Z
          creditInfo:
            creditLimit: ""
            paymentDue: 5
          status: active
    NewAnonymousCardRequestCreatedSuccessfully:
      required:
      - cardId
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Requisição de novo cartão feita com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        cardId:
          type: string
          description: Identificador único do cartão. Pode ser usado para verificar
            o status da requisição e para consultar dados do cartão uma vez que ele
            tenha sido emitido.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        accountId:
          type: string
          description: Identificador único da conta que foi criada para esse cartão.
            inicialmente a conta é anônima e não est´associada a nenhum titular.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
      example:
        accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
        resultData:
          resultCode: 0
          resultDescription: Requisição de novo cartão feita com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
    NewCardrequestCreatedSuccessfully:
      required:
      - cardId
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Requisição de novo cartão feita com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        cardId:
          type: string
          description: Identificador único do cartão. Pode ser usado para verificar
            o status da requisição e para consultar dados do cartão uma vez que ele
            tenha sido emitido.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
      example:
        resultData:
          resultCode: 0
          resultDescription: Requisição de novo cartão feita com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
    TransactionCreatedSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Transação incluída com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        transaction:
          $ref: '#/components/schemas/Transaction'
    AccountCancelledSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Conta cancelada!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        cancelledAccount:
          $ref: '#/components/schemas/Account'
      example:
        resultData:
          resultCode: 0
          resultDescription: Conta cancelada!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        cancelledAccount:
          psProductCode: "020101"
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          cards:
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          issuerAccountId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          psProductName: BANCO 1 BANDEIRA 1 PRE-PAGO
          accountOwner: ""
          inclusion_date: 2019-07-21T17:32:28Z
          creditInfo:
            creditLimit: ""
            paymentDue: 5
          status: active
    CancelVirtualCardResponse:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão virtual cancelado com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        cancelledVirtualCard:
          $ref: '#/components/schemas/ComposedVirtualCardInfo'
      example:
        resultData:
          resultCode: 0
          resultDescription: Cartão virtual cancelado com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        cancelledVirtualCard:
          virtual: ""
          constraints: ""
          info: ""
    DisputeCreatedSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Disputa criada com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        dispute:
          $ref: '#/components/schemas/Dispute'
      example:
        dispute:
          currentStage: chargeback
          disputeDate: 2017-07-21T17:32:28Z
          disputeMaxDateResponse: 28/07/2019
          dispute_history:
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          disputeId: 56dac5d8-c1f9-44d6-876a-761ac84db222
          disputeRequest:
            issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
            disputeCode: "30"
            accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
            amount_disputed: ""
            disputeTextMessage: Serviço não prestado em 211019
            partial: false
            willAddDocuments: false
            transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
            sourceAudit:
              processId: PID-12345
              operatorId: "12340985312"
          disputeStatus: waiting_for_response_from_issuer
          disputeType: card_not_present_fraud
          transaction:
            amount:
              amount: 123
              currencyCode: 986
            merchantCity: SAO PAULO
            transactionDateTime: 2017-07-21T17:32:28Z
            transactionStatus: received
            acquirerTransactionId: "12349087412309847213"
            terminalId: "1234567890"
            mcc: "3501"
            cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
            transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantName: Padaria do Joaquim.
            merchantUf: SP
            transactionType: sale
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantId: "12345678"
            countryCode: "076"
            merchantAddress: R MANOELITO DE ORNELLAS
            merchantDocumentId: "12345678901234"
            settlementDateTime: 2017-07-21T17:32:28Z
            acquirerId: "04"
            card: ""
            transactionAuthorizationResponse:
              approved: false
              denialReason: ""
            entryMode: emvContact
        resultData:
          resultCode: 0
          resultDescription: Disputa criada com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
    DisputeResponseCreatedSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Resposta criada com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        dispute:
          $ref: '#/components/schemas/Dispute'
      example:
        dispute:
          currentStage: chargeback
          disputeDate: 2017-07-21T17:32:28Z
          disputeMaxDateResponse: 28/07/2019
          dispute_history:
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          disputeId: 56dac5d8-c1f9-44d6-876a-761ac84db222
          disputeRequest:
            issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
            disputeCode: "30"
            accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
            amount_disputed: ""
            disputeTextMessage: Serviço não prestado em 211019
            partial: false
            willAddDocuments: false
            transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
            sourceAudit:
              processId: PID-12345
              operatorId: "12340985312"
          disputeStatus: waiting_for_response_from_issuer
          disputeType: card_not_present_fraud
          transaction:
            amount:
              amount: 123
              currencyCode: 986
            merchantCity: SAO PAULO
            transactionDateTime: 2017-07-21T17:32:28Z
            transactionStatus: received
            acquirerTransactionId: "12349087412309847213"
            terminalId: "1234567890"
            mcc: "3501"
            cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
            transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantName: Padaria do Joaquim.
            merchantUf: SP
            transactionType: sale
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantId: "12345678"
            countryCode: "076"
            merchantAddress: R MANOELITO DE ORNELLAS
            merchantDocumentId: "12345678901234"
            settlementDateTime: 2017-07-21T17:32:28Z
            acquirerId: "04"
            card: ""
            transactionAuthorizationResponse:
              approved: false
              denialReason: ""
            entryMode: emvContact
        resultData:
          resultCode: 0
          resultDescription: Resposta criada com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
    DisputeReversalCreatedSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Pedido de desistência de disputa criado com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        dispute:
          $ref: '#/components/schemas/Dispute'
      example:
        dispute:
          currentStage: chargeback
          disputeDate: 2017-07-21T17:32:28Z
          disputeMaxDateResponse: 28/07/2019
          dispute_history:
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          disputeId: 56dac5d8-c1f9-44d6-876a-761ac84db222
          disputeRequest:
            issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
            disputeCode: "30"
            accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
            amount_disputed: ""
            disputeTextMessage: Serviço não prestado em 211019
            partial: false
            willAddDocuments: false
            transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
            sourceAudit:
              processId: PID-12345
              operatorId: "12340985312"
          disputeStatus: waiting_for_response_from_issuer
          disputeType: card_not_present_fraud
          transaction:
            amount:
              amount: 123
              currencyCode: 986
            merchantCity: SAO PAULO
            transactionDateTime: 2017-07-21T17:32:28Z
            transactionStatus: received
            acquirerTransactionId: "12349087412309847213"
            terminalId: "1234567890"
            mcc: "3501"
            cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
            transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantName: Padaria do Joaquim.
            merchantUf: SP
            transactionType: sale
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantId: "12345678"
            countryCode: "076"
            merchantAddress: R MANOELITO DE ORNELLAS
            merchantDocumentId: "12345678901234"
            settlementDateTime: 2017-07-21T17:32:28Z
            acquirerId: "04"
            card: ""
            transactionAuthorizationResponse:
              approved: false
              denialReason: ""
            entryMode: emvContact
        resultData:
          resultCode: 0
          resultDescription: Pedido de desistência de disputa criado com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
    DisputeDocumentCreatedSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Documento adicionado com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        dispute:
          $ref: '#/components/schemas/Dispute'
    PinChangeCreatedSuccessfully:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Mudança de PIN requisitada com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
      example:
        resultData:
          resultCode: 0
          resultDescription: Mudança de PIN requisitada com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
    FindCardByPANRequest:
      required:
      - PAN
      type: object
      properties:
        PAN:
          type: string
          description: Número do cartão.
          format: ^\d{16,19}$
          example: "6512544312349083"
    CancelAccountRequest:
      required:
      - cancellationCode
      type: object
      properties:
        cancellationCode:
          type: integer
          description: Código identificando o tipo de cancelamento.
          example: 35
        reason:
          type: string
          description: Motivo do cancelamento.
          example: Cliente decidiu cancelar por razões pessoais.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    BindCardRequest:
      required:
      - cardId
      - cvv
      - dateExp
      - pan
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        cardId:
          type: string
          description: Identificador do cartão que se deseja associar à conta.
          example: 4455b09a-c20a-46d0-883a-8b2a35911111
        pan:
          type: string
          description: Número do cartão.
          format: ^\d{16,19}$
          example: "6512544312349083"
        cvv:
          type: string
          description: Código de segurança do cartão.
          format: ^\d{3}$
          example: "123"
        dateExp:
          type: string
          description: Data de expiração do cartão.
          format: ^\d{2}\/\d{4}$
          example: 12/2028
    UpdateAccountRequest:
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        creditInfo:
          $ref: '#/components/schemas/CreditInfo'
        billingAddress:
          description: Endereço de faturamento da conta.
          allOf:
          - $ref: '#/components/schemas/Address'
        cardDeliveryAddress:
          description: Endereço para entrega do cartão.
          allOf:
          - $ref: '#/components/schemas/Address'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    CardEmbossing:
      required:
      - embossingName
      type: object
      properties:
        embossingName:
          type: string
          description: Nome do portador conforme gravado na personalização do cartão.
          format: ^(?<! )[-a-zA-Z' ]{2,26}$
          example: FULANO DA SILVA
      example:
        embossingName: FULANO DA SILVA
    CardholderData:
      required:
      - birthDate
      - cardData
      - cardholderType
      - fullName
      - identityDocumentNumber
      - nationality
      type: object
      properties:
        cardholderType:
          type: string
          description: Tipo de portador ("main" - Titular ou "additional" - Adicional)
          example: main
          enum:
          - main
          - additional
        fullName:
          type: string
          description: Nome completo do portador, ou razão social se for pessoa jurídica.
          example: Fulano da Silva
        cardData:
          $ref: '#/components/schemas/CardEmbossing'
        identityDocumentNumber:
          type: string
          description: No Brasil, usar CPF ou CNPJ do portador.
          format: ^\d{11,14}$
          example: "03873703805"
        otherIdentityDocumentNumber:
          $ref: '#/components/schemas/PersonalIdentityDocumentInfo'
        birthDate:
          type: string
          description: Data de nascimento no formato dd\/MM\/yyyy
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 21/03/1983
        nationality:
          type: string
          description: Nome do país de nascimento ou de naturalização do portador.
          example: Brasil
        gender:
          type: string
          description: Gênero
          example: male
          enum:
          - male
          - female
          - other
        civilStatus:
          type: string
          description: Estado civil.
          example: single
          enum:
          - single
          - married
          - divorced
          - widowed
          - other
        contactInformation:
          $ref: '#/components/schemas/ContactInformation'
      example:
        cardData:
          embossingName: FULANO DA SILVA
        cardholderType: main
        otherIdentityDocumentNumber:
          identityDocumentNumber: "03873703805"
          issuedBy: SJS
          state: RS
        contactInformation:
          personalPhoneNumber1: +555132214879
          personalPhoneNumber2: +5551912345678
          comercialPhoneNumber1: +555132214879
          email: fulano@silva.com.br
        identityDocumentNumber: "03873703805"
        nationality: Brasil
        gender: male
        fullName: Fulano da Silva
        birthDate: 21/03/1983
        civilStatus: single
    AccountOwnerData:
      required:
      - contactInformation
      - fullName
      - identityDocumentNumber
      type: object
      properties:
        fullName:
          type: string
          description: Nome completo do portador, ou razão social se for pessoa jurídica.
          example: Fulano da Silva
        identityDocumentNumber:
          type: string
          description: No Brasil, usar CPF ou CNPJ do portador.
          format: ^\d{11,14}$
          example: "03873703805"
        otherIdentityDocumentNumber:
          $ref: '#/components/schemas/PersonalIdentityDocumentInfo'
        motherName:
          type: string
          description: Nome completo da mãe do titular.
          example: Maria da Silva
        contactInformation:
          $ref: '#/components/schemas/ContactInformation'
        occupationInfo:
          $ref: '#/components/schemas/OccupationInfo'
    UpdateCardholderRequest:
      $ref: '#/components/schemas/CardholderData'
    Cardholder:
      type: object
      properties:
        cardholderId:
          type: string
          description: Identificador único do portador.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        cardholderData:
          $ref: '#/components/schemas/CardholderData'
    Address:
      required:
      - addressLine1
      - city
      - state
      type: object
      properties:
        addressLine1:
          type: string
          description: Endereço. Nome da rua.
          example: R. Manoelito de Ornellas
        addressLine2:
          maxLength: 5
          minLength: 1
          type: string
          description: Endereço. Número da rua.
          example: "155"
        addressLine3:
          type: string
          description: Endereço. Complemento.
          example: Sala 1303, Torre A
        reference:
          type: string
          description: Referência próxima para auxílio na localização.
          example: Ao lado da padaria do Joaquim.
        neighborhood:
          type: string
          description: Bairro.
          example: Praia de Belas
        city:
          type: string
          description: Cidade.
          example: Porto Alegre
        state:
          type: string
          description: Estado.
          format: ^[A-Z][A-Z]$
          example: RS
        zipcode:
          type: string
          description: CEP.
          example: 90690-200
        country:
          type: string
          description: País.
          example: Brasil
          default: Brasil
    ContactInformation:
      type: object
      properties:
        personalPhoneNumber1:
          type: string
          description: Telefone celular pessoal no formato +DDI DDD NNNNNNNNN
          format: ^\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$
          example: +555132214879
        personalPhoneNumber2:
          type: string
          description: Telefone residencial (fixo) no formato +DDI DDD NNNNNNNNN
          format: ^\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$
          example: +5551912345678
        comercialPhoneNumber1:
          type: string
          description: Telefone comercial no formato +DDI DDD NNNNNNNNN
          format: ^\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$
          example: +555132214879
        email:
          type: string
          description: Endereço de e-mail de contato.
          format: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
          example: fulano@silva.com.br
      example:
        personalPhoneNumber1: +555132214879
        personalPhoneNumber2: +5551912345678
        comercialPhoneNumber1: +555132214879
        email: fulano@silva.com.br
    OccupationInfo:
      type: object
      properties:
        companyName:
          type: string
          description: Nome da empresa onde trabalha
          example: Organizações Tabajara SA
        jobTitle:
          type: string
          description: Nome do cargo ou função exercida na empresa.
          example: Analista de Sistemas
        currentJobTime:
          type: integer
          description: Quantos anos no cargo atual.
          format: int32
          example: 2
        income:
          type: object
          description: Salário ou renda da pessoa.
          allOf:
          - $ref: '#/components/schemas/Amount'
        incomeRange:
          type: string
          description: |-
            Faixa salarial ou de renda.
            * 01 - Até R$ 1500,00.
            * 02 - R$ 1500,01 a R$ 3000,00.
            * 03 - R$ 3000,01 a R$ 5000,00.
            * 04 - R$ 5000,01 a R$ 8000,00.
            * 05 - Acima de R$ 8000,01.
          format: ^\d{2}$
          example: "01"
    Amount:
      required:
      - amount
      - currencyCode
      type: object
      properties:
        amount:
          type: integer
          description: Valor omitindo a vírgula. Por exemplo, R$ 1,23 ficaria "amount":123
          format: int64
          example: 123
        currencyCode:
          type: integer
          description: Código da moeda, conforme ISO-4217
          example: 986
          default: 986
      example:
        amount: 123
        currencyCode: 986
    AccountListResult:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indica que atingiu o limite de retorno e existem mais elementos
            a serem retornados.
          example: false
        accounts:
          type: array
          description: Lista de contas.
          items:
            $ref: '#/components/schemas/Account'
      example:
        hasMore: false
        accounts:
        - psProductCode: "020101"
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          cards:
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          issuerAccountId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          psProductName: BANCO 1 BANDEIRA 1 PRE-PAGO
          accountOwner: ""
          inclusion_date: 2019-07-21T17:32:28Z
          creditInfo:
            creditLimit: ""
            paymentDue: 5
          status: active
        - psProductCode: "020101"
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          cards:
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          issuerAccountId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          psProductName: BANCO 1 BANDEIRA 1 PRE-PAGO
          accountOwner: ""
          inclusion_date: 2019-07-21T17:32:28Z
          creditInfo:
            creditLimit: ""
            paymentDue: 5
          status: active
    CardholderListResult:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indica que atingiu o limite de retorno e existem mais elementos
            a serem retornados.
          example: false
        cardholders:
          type: array
          description: Lista de portadores
          items:
            $ref: '#/components/schemas/Cardholder'
    TransactionListResult:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indica que atingiu o limite de retorno e existem mais elementos
            a serem retornados.
          example: false
        transactions:
          type: array
          description: Lista de transações.
          items:
            $ref: '#/components/schemas/TransactionQueryResult'
      example:
        hasMore: false
        transactions:
        - amount:
            amount: 123
            currencyCode: 986
          merchantCity: SAO PAULO
          transactionDateTime: 2017-07-21T17:32:28Z
          transactionStatus: received
          acquirerTransactionId: "12349087412309847213"
          terminalId: "1234567890"
          mcc: "3501"
          cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
          transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
          merchantName: Padaria do Joaquim.
          merchantUf: SP
          transactionType: sale
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          merchantId: "12345678"
          countryCode: "076"
          merchantAddress: R MANOELITO DE ORNELLAS
          merchantDocumentId: "12345678901234"
          settlementDateTime: 2017-07-21T17:32:28Z
          acquirerId: "04"
          card: ""
          transactionAuthorizationResponse:
            approved: false
            denialReason: ""
          entryMode: emvContact
        - amount:
            amount: 123
            currencyCode: 986
          merchantCity: SAO PAULO
          transactionDateTime: 2017-07-21T17:32:28Z
          transactionStatus: received
          acquirerTransactionId: "12349087412309847213"
          terminalId: "1234567890"
          mcc: "3501"
          cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
          transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
          merchantName: Padaria do Joaquim.
          merchantUf: SP
          transactionType: sale
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          merchantId: "12345678"
          countryCode: "076"
          merchantAddress: R MANOELITO DE ORNELLAS
          merchantDocumentId: "12345678901234"
          settlementDateTime: 2017-07-21T17:32:28Z
          acquirerId: "04"
          card: ""
          transactionAuthorizationResponse:
            approved: false
            denialReason: ""
          entryMode: emvContact
    CreditListResult:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indica que atingiu o limite de retorno e existem mais elementos
            a serem retornados.
          example: false
        credits:
          type: array
          description: Lista de créditos futuros.
          items:
            $ref: '#/components/schemas/Credit'
      example:
        credits:
        - creditId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          amount: ""
          credit_type: 1
          inclusion_date: 2019-07-21T17:32:28Z
        - creditId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          amount: ""
          credit_type: 1
          inclusion_date: 2019-07-21T17:32:28Z
        hasMore: false
    AccountBalance:
      required:
      - accountId
      - balance
      type: object
      properties:
        accountId:
          type: string
          description: Identificador único da conta.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        balance:
          description: Saldo de compras da conta
          allOf:
          - $ref: '#/components/schemas/Amount'
        creditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite de crédito
            atribuído à conta pelo emissor.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        withdrawalCreditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite de crédito
            para saques atribuído à conta pelo emissor.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        currentCreditLimit:
          description: 'Para produtos de crédito pós-pago: Valor do limite disponível
            atualmente para a conta, já descontando o saldo.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        currentWithdrawalCreditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite atualmente
            disponível para saques, j´descontando gastos.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        paymentDue:
          type: integer
          description: 'Para produtos de crédito pós-pago: Dia de vencimento da fatura
            mensal.'
          example: 5
        query_date:
          type: string
          description: Data de consulta.
          format: date-time
          example: 2019-07-21T17:32:28Z
      example:
        accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
        currentCreditLimit: ""
        balance: ""
        withdrawalCreditLimit: ""
        query_date: 2019-07-21T17:32:28Z
        creditLimit: ""
        currentWithdrawalCreditLimit: ""
        paymentDue: 5
    FutureStatementList:
      required:
      - list
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Lista de faturas obtida com sucesso
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        statementList:
          type: array
          description: Lista de faturas futuras.
          items:
            $ref: '#/components/schemas/FutureStatement'
      example:
        resultData:
          resultCode: 0
          resultDescription: Lista de faturas obtida com sucesso
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        statementList:
        - closeDate: 29/10/2019
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          balance: ""
          query_date: 2019-07-21T17:32:28Z
          paymentDue: 30/10/2019
          transactionsList:
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          sourceAudit:
            processId: PID-12345
            operatorId: "12340985312"
        - closeDate: 29/10/2019
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          balance: ""
          query_date: 2019-07-21T17:32:28Z
          paymentDue: 30/10/2019
          transactionsList:
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          sourceAudit:
            processId: PID-12345
            operatorId: "12340985312"
    StatementList:
      required:
      - list
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Lista de faturas obtida com sucesso
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        statementList:
          type: array
          description: Lista de faturas.
          items:
            $ref: '#/components/schemas/Statement'
      example:
        resultData:
          resultCode: 0
          resultDescription: Lista de faturas obtida com sucesso
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        statementList:
        - chargesInNextStatementForMinimumPayment: ""
          paymentDueActual: 30/10/2019
          minimumPaymentDue: ""
          purchasesAndDebits: ""
          transactionsList:
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          sourceAudit:
            processId: PID-12345
            operatorId: "12340985312"
          closeDate: 29/10/2019
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          paymentsAndCredits: ""
          CET: ""
          balance: ""
          query_date: 2019-07-21T17:32:28Z
          statementStatus: open
        - chargesInNextStatementForMinimumPayment: ""
          paymentDueActual: 30/10/2019
          minimumPaymentDue: ""
          purchasesAndDebits: ""
          transactionsList:
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          - internationalTransaction: false
            amount:
              amount: 123
              currencyCode: 986
            cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            debit_or_credit: debit
            transactionDescription: STARBUCKS 1208111
            last_four_digits: "3245"
            transactionDate: 30/10/2019
            transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
            amountDollar: null
          sourceAudit:
            processId: PID-12345
            operatorId: "12340985312"
          closeDate: 29/10/2019
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          paymentsAndCredits: ""
          CET: ""
          balance: ""
          query_date: 2019-07-21T17:32:28Z
          statementStatus: open
    FutureStatement:
      required:
      - accountId
      - balance
      - paymentDue
      - transactionsList
      type: object
      properties:
        accountId:
          type: string
          description: Identificador único da conta.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        paymentDue:
          type: string
          description: Data de vencimento da fatura.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 30/10/2019
        closeDate:
          type: string
          description: Data de fechamento da fatura.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 29/10/2019
        balance:
          description: Saldo total da fatura
          allOf:
          - $ref: '#/components/schemas/Amount'
        transactionsList:
          type: array
          description: Lista de lançamentos em aberto
          items:
            $ref: '#/components/schemas/StatementEntry'
        query_date:
          type: string
          description: Data de consulta.
          format: date-time
          example: 2019-07-21T17:32:28Z
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
      example:
        closeDate: 29/10/2019
        accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
        balance: ""
        query_date: 2019-07-21T17:32:28Z
        paymentDue: 30/10/2019
        transactionsList:
        - internationalTransaction: false
          amount:
            amount: 123
            currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          debit_or_credit: debit
          transactionDescription: STARBUCKS 1208111
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
          amountDollar: null
        - internationalTransaction: false
          amount:
            amount: 123
            currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          debit_or_credit: debit
          transactionDescription: STARBUCKS 1208111
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
          amountDollar: null
        sourceAudit:
          processId: PID-12345
          operatorId: "12340985312"
    OpenStatement:
      required:
      - accountId
      - balance
      - creditLimit
      - currentCreditLimit
      - currentWithdrawalCreditLimit
      - paymentDue
      - transactionsList
      - withdrawalCreditLimit
      type: object
      properties:
        accountId:
          type: string
          description: Identificador único da conta.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        paymentDue:
          type: string
          description: Data de vencimento da fatura.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 30/10/2019
        closeDate:
          type: string
          description: Data de fechamento da fatura.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 29/10/2019
        previousBalance:
          description: Saldo da fatura anterior
          allOf:
          - $ref: '#/components/schemas/Amount'
        balance:
          description: Saldo total da fatura
          allOf:
          - $ref: '#/components/schemas/Amount'
        creditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite de crédito
            atribuído à conta pelo emissor.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        withdrawalCreditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite de crédito
            para saques atribuído à conta pelo emissor.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        currentCreditLimit:
          description: 'Para produtos de crédito pós-pago: Valor do limite disponível
            atualmente para a conta, já descontando o saldo.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        currentWithdrawalCreditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite atualmente
            disponível para saques, j´descontando gastos.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        transactionsList:
          type: array
          description: Lista de lançamentos em aberto
          items:
            $ref: '#/components/schemas/StatementEntry'
        query_date:
          type: string
          description: Data de consulta.
          format: date-time
          example: 2019-07-21T17:32:28Z
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
      example:
        closeDate: 29/10/2019
        accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
        currentCreditLimit: ""
        balance: ""
        withdrawalCreditLimit: ""
        query_date: 2019-07-21T17:32:28Z
        creditLimit: ""
        currentWithdrawalCreditLimit: ""
        paymentDue: 30/10/2019
        transactionsList:
        - internationalTransaction: false
          amount:
            amount: 123
            currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          debit_or_credit: debit
          transactionDescription: STARBUCKS 1208111
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
          amountDollar: null
        - internationalTransaction: false
          amount:
            amount: 123
            currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          debit_or_credit: debit
          transactionDescription: STARBUCKS 1208111
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
          amountDollar: null
        sourceAudit:
          processId: PID-12345
          operatorId: "12340985312"
        previousBalance: ""
    Statement:
      required:
      - accountId
      - balance
      - paymentDueActual
      - paymentsAndCredits
      - purchasesAndDebits
      - statementStatus
      - transactionsList
      type: object
      properties:
        accountId:
          type: string
          description: Identificador único da conta.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        statementStatus:
          type: string
          description: Status da fatura. -- open - Fatura aberta atual. -- closed
            - Última fatura fechada.
          example: open
          enum:
          - open
          - closed
        paymentDueActual:
          type: string
          description: Data de vencimento da fatura, levando em conta fins de semana
            e feriados.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 30/10/2019
        closeDate:
          type: string
          description: Data de fechamento da fatura.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 29/10/2019
        paymentsAndCredits:
          description: Pagamentos e créditos nessa fatura
          allOf:
          - $ref: '#/components/schemas/Amount'
        purchasesAndDebits:
          description: Compras e débitos nessa fatura
          allOf:
          - $ref: '#/components/schemas/Amount'
        balance:
          description: Saldo total da fatura
          allOf:
          - $ref: '#/components/schemas/Amount'
        minimumPaymentDue:
          description: Valor mínimo a ser pago para está fatura até o vencimento.
          allOf:
          - $ref: '#/components/schemas/Amount'
        transactionsList:
          type: array
          description: Lista de lançamentos nessa fatura
          items:
            $ref: '#/components/schemas/StatementEntry'
        chargesInNextStatementForMinimumPayment:
          description: No caso de ser pago apenas o valor mínimo até a data de vencimento
            valor a ser pago na próxima fatura (juros mais impostos).
          allOf:
          - $ref: '#/components/schemas/Amount'
        CET:
          description: Custo Efetivo Total (CET), para o próximo período, das operações
            de crédito passíveis de contratação.
          allOf:
          - $ref: '#/components/schemas/FeesAndCET'
        query_date:
          type: string
          description: Data de consulta.
          format: date-time
          example: 2019-07-21T17:32:28Z
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
      example:
        chargesInNextStatementForMinimumPayment: ""
        paymentDueActual: 30/10/2019
        minimumPaymentDue: ""
        purchasesAndDebits: ""
        transactionsList:
        - internationalTransaction: false
          amount:
            amount: 123
            currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          debit_or_credit: debit
          transactionDescription: STARBUCKS 1208111
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
          amountDollar: null
        - internationalTransaction: false
          amount:
            amount: 123
            currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          debit_or_credit: debit
          transactionDescription: STARBUCKS 1208111
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
          amountDollar: null
        sourceAudit:
          processId: PID-12345
          operatorId: "12340985312"
        closeDate: 29/10/2019
        accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
        paymentsAndCredits: ""
        CET: ""
        balance: ""
        query_date: 2019-07-21T17:32:28Z
        statementStatus: open
    CET:
      required:
      - CET
      - IOF
      - monthlyInterest
      - yearlyInterest
      type: object
      properties:
        monthlyInterest:
          type: string
          description: Juros mensais.
          example: 12,29%
        yearlyInterest:
          type: string
          description: Juros anuais.
          example: 312,29%
        IOF:
          type: string
          description: IOF.
          example: 6,59%
        DailyIOF:
          type: string
          description: IOF diário.
          example: 0,59%
        CET:
          type: string
          description: Custo Efetivo Total, ao ano.
          example: 334,59%
      example:
        IOF: 6,59%
        CET: 334,59%
        DailyIOF: 0,59%
        monthlyInterest: 12,29%
        yearlyInterest: 312,29%
    CETLateness:
      required:
      - CET
      - IOF
      - latenessFee
      - monthlyInterest
      - yearlyInterest
      type: object
      properties:
        monthlyInterest:
          type: string
          description: Juros mensais.
          example: 12,29%
        latenessFee:
          type: string
          description: Multa por atraso.
          example: 2,00%
        yearlyInterest:
          type: string
          description: Juros anuais.
          example: 312,29%
        IOF:
          type: string
          description: IOF.
          example: 6,59%
        DailyIOF:
          type: string
          description: IOF diário.
          example: 0,59%
        CET:
          type: string
          description: Custo Efetivo Total, ao ano.
          example: 334,59%
    FeesAndCET:
      required:
      - latenessFee
      - latenessInterest
      - revolvingCredit
      type: object
      properties:
        revolvingCredit:
          $ref: '#/components/schemas/CET'
        statementInstallmentFinancing:
          $ref: '#/components/schemas/CET'
        cashWithdrawal:
          $ref: '#/components/schemas/CET'
        latenessInterest:
          $ref: '#/components/schemas/CETLateness'
    InstallmentRequest:
      required:
      - numberOfInstallments
      type: object
      properties:
        numberOfInstallments:
          type: integer
          description: Número de parcelas em que o pagamento deve ser quebrado.
          example: 3
        installmentAmount:
          $ref: '#/components/schemas/Amount'
    AdvancePaymentRequest:
      required:
      - installmentsToAdvance
      - transactionId
      type: object
      properties:
        transactionId:
          type: string
          description: Identificador único da transação cujas parcelas devem ser liquidadas
            antecipadamente.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        installmentsToAdvance:
          type: integer
          description: Número de parcelas que devem ser adiantadas
          example: 3
    AllInstallmentPurchase:
      required:
      - installment_purchases
      type: object
      properties:
        installmentPurchases:
          type: array
          items:
            $ref: '#/components/schemas/InstallmentPurchase'
      example:
        installmentPurchases:
        - installments:
          - installmentDate: 30/11/2019
            amount:
              amount: 123
              currencyCode: 986
          - installmentDate: 30/11/2019
            amount:
              amount: 123
              currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          transactionDescription: LOJAS RENNER
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
        - installments:
          - installmentDate: 30/11/2019
            amount:
              amount: 123
              currencyCode: 986
          - installmentDate: 30/11/2019
            amount:
              amount: 123
              currencyCode: 986
          cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          transactionDescription: LOJAS RENNER
          last_four_digits: "3245"
          transactionDate: 30/10/2019
          transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
    InstallmentPurchase:
      required:
      - installments
      - last_four_digits
      - transactionDate
      - transactionDescription
      - transactionId
      type: object
      properties:
        transactionId:
          type: string
          description: Identificador único da transação representada nessa parcela.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        cardId:
          type: string
          description: Identificador único do cartão.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        last_four_digits:
          type: string
          description: Últimos quatro dígitos do cartão.
          format: ^\d{4}$
          example: "3245"
        transactionDescription:
          type: string
          description: Descrição da transação.
          example: LOJAS RENNER
        transactionDate:
          description: Data em que a transação ocorreu.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 30/10/2019
        installments:
          type: array
          items:
            $ref: '#/components/schemas/Installment'
      example:
        installments:
        - installmentDate: 30/11/2019
          amount:
            amount: 123
            currencyCode: 986
        - installmentDate: 30/11/2019
          amount:
            amount: 123
            currencyCode: 986
        cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        transactionDescription: LOJAS RENNER
        last_four_digits: "3245"
        transactionDate: 30/10/2019
        transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
    Installment:
      required:
      - amount
      - installmentDate
      type: object
      properties:
        installmentDate:
          description: Data da parcela.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 30/11/2019
        amount:
          $ref: '#/components/schemas/Amount'
      example:
        installmentDate: 30/11/2019
        amount:
          amount: 123
          currencyCode: 986
    InstallmentOptions:
      required:
      - installmentOptions
      - originalAmount
      type: object
      properties:
        installmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/InstallmentOption'
        originalAmount:
          $ref: '#/components/schemas/Amount'
      example:
        originalAmount: null
        installmentOptions:
        - totalAmount: null
          CET:
            IOF: 6,59%
            CET: 334,59%
            DailyIOF: 0,59%
            monthlyInterest: 12,29%
            yearlyInterest: 312,29%
          installmentAmount:
            amount: 123
            currencyCode: 986
          numInstallments: 12
        - totalAmount: null
          CET:
            IOF: 6,59%
            CET: 334,59%
            DailyIOF: 0,59%
            monthlyInterest: 12,29%
            yearlyInterest: 312,29%
          installmentAmount:
            amount: 123
            currencyCode: 986
          numInstallments: 12
    InstallmentOption:
      required:
      - CET
      - installmentAmount
      - numInstallments
      - totalAmount
      type: object
      properties:
        numInstallments:
          type: integer
          description: Número de parcelas.
          example: 12
        installmentAmount:
          $ref: '#/components/schemas/Amount'
        totalAmount:
          $ref: '#/components/schemas/Amount'
        CET:
          $ref: '#/components/schemas/CET'
      example:
        totalAmount: null
        CET:
          IOF: 6,59%
          CET: 334,59%
          DailyIOF: 0,59%
          monthlyInterest: 12,29%
          yearlyInterest: 312,29%
        installmentAmount:
          amount: 123
          currencyCode: 986
        numInstallments: 12
    StatementEntry:
      required:
      - amount
      - internationalTransaction
      - last_four_digits
      - transactionDate
      - transactionDescription
      type: object
      properties:
        transactionId:
          type: string
          description: Identificador único da transação representada nesse lançamento.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        cardId:
          type: string
          description: Identificador único do cartão.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        last_four_digits:
          type: string
          description: Últimos quatro dígitos do cartão.
          format: ^\d{4}$
          example: "3245"
        internationalTransaction:
          type: boolean
          description: Indica se a transação é internacional (True) ou não (False)
          example: false
        transactionDate:
          description: Data em que a transação ocorreu.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 30/10/2019
        transactionDescription:
          type: string
          description: Descrição da transação, para ser mostrada na fatura.
          example: STARBUCKS 1208111
        amount:
          $ref: '#/components/schemas/Amount'
        amountDollar:
          $ref: '#/components/schemas/Amount'
        debit_or_credit:
          type: string
          description: Define se a transação gerou um débito ou um crédito.
          example: debit
          enum:
          - debit
          - credit
      example:
        internationalTransaction: false
        amount:
          amount: 123
          currencyCode: 986
        cardId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        debit_or_credit: debit
        transactionDescription: STARBUCKS 1208111
        last_four_digits: "3245"
        transactionDate: 30/10/2019
        transactionId: 5566fefb-af25-9984-9fb0-39f6d2021111
        amountDollar: null
    Account:
      required:
      - accountOwner
      - psProductCode
      type: object
      properties:
        accountId:
          type: string
          description: Identificador único da conta.
          example: 5566fefb-af25-9984-9fb0-39f6d2021111
        psProductCode:
          type: string
          description: Código do produto fornecido pela paySmart.
          example: "020101"
        psProductName:
          type: string
          description: Nome do produto.
          example: BANCO 1 BANDEIRA 1 PRE-PAGO
        issuerAccountId:
          type: string
          description: Identificador único da conta atribuído pelo emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        accountOwner:
          description: Informações relacionadas ao titular da conta.
          allOf:
          - $ref: '#/components/schemas/AccountOwnerData'
        creditInfo:
          $ref: '#/components/schemas/CreditInfo'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        status:
          $ref: '#/components/schemas/AccountStatus'
        inclusion_date:
          type: string
          description: Data de inclusão da conta.
          format: date-time
          example: 2019-07-21T17:32:28Z
      example:
        psProductCode: "020101"
        accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
        cards:
        - product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
        - product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
        issuerAccountId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        psProductName: BANCO 1 BANDEIRA 1 PRE-PAGO
        accountOwner: ""
        inclusion_date: 2019-07-21T17:32:28Z
        creditInfo:
          creditLimit: ""
          paymentDue: 5
        status: active
    AccountStatus:
      type: string
      description: Status da conta. -- active - Conta ativa. -- canceled - Conta cancelada.
        -- closed - Conta fechada. -- blocked - Conta bloqueada. -- enquadrada - Conta
        enquadrada. -- requested - Comta requisitada e em processo de criação. --
        request_denied - Requisição foi recebida mas posteriormente negada por algum
        motivo.
      example: active
      enum:
      - active
      - canceled
      - closed
      - blocked
      - enquadrada
      - requested
      - request_denied
    CreditInfo:
      type: object
      properties:
        creditLimit:
          description: 'Para produtos de crédito pós-pago: Valor limite de crédito
            atribuído à conta pelo emissor.'
          allOf:
          - $ref: '#/components/schemas/Amount'
        paymentDue:
          type: integer
          description: 'Para produtos de crédito pós-pago: Dia de vencimento da fatura
            mensal.'
          example: 5
      example:
        creditLimit: ""
        paymentDue: 5
    BankAccountInfo:
      type: object
      properties:
        bankID:
          type: string
          description: Identificador do Banco. No Brasil usar número do Banco.
          example: "1"
        bankName:
          type: string
          description: Nome do banco.
          example: Banco do Brasil
        agencyCode:
          type: integer
          description: Código da agência.
          example: 4001
        accountNumber:
          type: integer
          description: Número da conta, incluindo dígito verificador.
          example: 1234560
    CompanyInfo:
      type: object
      properties:
        identityDocumentNumber:
          type: string
          description: No Brasil, usar CNPJ do companhia.
          format: ^\d{11,14}$
          example: "03873703805"
        name:
          type: string
          description: Razão social da companhia.
          example: Industrias Fortuna
        departmentCode:
          type: string
          description: Nome ou código do departamento na empresa.
          example: Departamento de Contabilidade
        contactPerson:
          type: string
          description: Pessoa de contato.
          example: Fulano da Silva
    PersonalIdentityDocumentInfo:
      required:
      - identityDocumentNumber
      - issuedBy
      - state
      type: object
      properties:
        identityDocumentNumber:
          maxLength: 13
          minLength: 10
          type: string
          description: No Brasil, usar o RG.
          example: "03873703805"
        state:
          type: string
          description: Estado.
          format: ^[A-Z][A-Z]$
          example: RS
        issuedBy:
          type: string
          description: Orgão emissor.
          example: SJS
      example:
        identityDocumentNumber: "03873703805"
        issuedBy: SJS
        state: RS
    NewAccountRequest:
      required:
      - accountOwner
      - billingAddress
      - cardDeliveryAddress
      - psProductCode
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        psProductCode:
          type: string
          description: Código do produto. Este código é fornecido pela paySmart para
            o emissor.
          example: "020101"
        issuerAccountId:
          type: string
          description: Identificador único da conta atribuído pelo emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        accountOwner:
          description: Informações relacionadas ao titular da conta.
          allOf:
          - $ref: '#/components/schemas/AccountOwnerData'
        creditInfo:
          $ref: '#/components/schemas/CreditInfo'
        billingAddress:
          description: Endereço de faturamento da conta.
          allOf:
          - $ref: '#/components/schemas/Address'
        cardDeliveryAddress:
          description: Endereço para entrega do cartão.
          allOf:
          - $ref: '#/components/schemas/Address'
        requestingCompanyInfo:
          description: Informações da companhia solicitante (opcional, só necessário
            em produtos B2B).
          allOf:
          - $ref: '#/components/schemas/CompanyInfo'
        bankAccount:
          description: Informações da conta bancária associada a essa conta (opcional).
          allOf:
          - $ref: '#/components/schemas/BankAccountInfo'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    NewAnonymousCardRequest:
      required:
      - cardDeliveryAddress
      - psProductCode
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        issuerCardId:
          type: string
          description: Identificador único para esse cartão no emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        psProductCode:
          type: string
          description: Código do produto. Este código é fornecido pela paySmart para
            o emissor.
          example: "020101"
        deliveryKitCode:
          type: number
          description: Código numérico de até seis dígitos combinado entre emissor,
            paySmart e gráfica, para determinar a arte do cartão.
          example: 1
        extraData:
          type: string
          description: Campo livre que pode assumir o significado desejado pelo emissor,
            conforme combinação prévia com paySmart e gráfica (exexmplo - código de
            barras, recebimento de lotes, etc.)
          example: A/C RECURSOS HUMANOS
        cardDeliveryAddress:
          description: Endereço para entrega do cartão.
          allOf:
          - $ref: '#/components/schemas/Address'
        embossingName:
          type: string
          description: Nome do portador que deve ser gravado na personalização do
            cartão. Campo opcional.
          format: ^(?<! )[-a-zA-Z' ]{2,26}$
          example: FULANO DA SILVA
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    NewCardRequest:
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        issuerCardId:
          type: string
          description: Identificador único para esse cartão no emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        deliveryKitCode:
          type: number
          description: Código numérico de seis dígitos combinado entre emissor, paySmart
            e gráfica, para determinar a arte do cartão.
          example: 1
        extraData:
          type: string
          description: Campo livre que pode assumir o significado desejado pelo emissor,
            conforme combinação prévia com paySmart e gráfica (exexmplo - código de
            barras, recebimento de lotes, etc.)
          example: A/C RECURSOS HUMANOS
        inhibitPhysicalCard:
          type: boolean
          description: Flag indicando que o cartão físico não deve ser impresso. O
            valor padrão é "false", ou seja, o cartão será enviado normalmente para
            a gráfica
          example: false
        newPin:
          description: Senha que deve ser atribuída ao cartão
          allOf:
          - $ref: '#/components/schemas/InputPin'
        cardholder:
          description: Informações relacionadas ao portador do cartão.  Obrigatório
            caso não se trate de um cartão anônimo vinculado a uma conta.
          allOf:
          - $ref: '#/components/schemas/CardholderData'
        cardDeliveryAddress:
          description: Endereço para entrega do cartão. Opcional, se não for enviado
            é usado o endereço definido para a conta.
          allOf:
          - $ref: '#/components/schemas/Address'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    UpdateCardRequest:
      required:
      - cardholder
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        issuerCardId:
          type: string
          description: Identificador único para esse cartão no emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        cardholder:
          description: Informações relacionadas ao portador do cartão.
          allOf:
          - $ref: '#/components/schemas/CardholderData'
    AssociateAnonymousCardRequest:
      required:
      - CVV
      - PAN
      - cardholder
      - dateExp
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        PAN:
          type: string
          description: Número do cartão.
          format: ^\d{16,19}$
          example: "6512544312349083"
        CVV:
          type: string
          description: Código de segurança do cartão. Para validar que o usuário realmente
            está com o cartão.
          format: ^\d{3}$
          example: "123"
        dateExp:
          type: string
          description: Data de expiração do cartão. Para validar que o usuário realmente
            está com o cartão.
          format: ^\d{2}\/\d{4}$
          example: 12/2028
        cardholder:
          description: Informações relacionadas ao portador do cartão. Vão ser usadas
            para associar o cartão anônimo a uma pessoa.
          allOf:
          - $ref: '#/components/schemas/CardholderData'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    NewCreditRequest:
      required:
      - amount
      - credit_type
      - inclusion_date
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        inclusion_date:
          type: string
          description: Data de início de validade/disponibilização de crédito nos
            cartões.
          format: date-time
          example: 2019-07-21T17:32:28Z
        amount:
          description: Valor do crédito a ser adicionado na conta.
          allOf:
          - $ref: '#/components/schemas/Amount'
        credit_type:
          type: integer
          description: tipo de caga de crédito realizada (normal, emergencial, etc).
          example: 1
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    Credit:
      required:
      - amount
      - creditId
      - credit_type
      - inclusion_date
      type: object
      properties:
        creditId:
          type: string
          description: Identificador da carga de créditos.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        inclusion_date:
          type: string
          description: Data de início de validade/disponibilização de crédito nos
            cartões.
          format: date-time
          example: 2019-07-21T17:32:28Z
        amount:
          description: Valor do crédito a ser adicionado na conta.
          allOf:
          - $ref: '#/components/schemas/Amount'
        credit_type:
          type: integer
          description: tipo de caga de crédito realizada (normal, emergencial, etc).
          example: 1
      example:
        creditId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        amount: ""
        credit_type: 1
        inclusion_date: 2019-07-21T17:32:28Z
    CreditCreatedSuccessfully:
      required:
      - credit
      - resultData
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Transação incluída com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        credit:
          $ref: '#/components/schemas/Credit'
      example:
        resultData:
          resultCode: 0
          resultDescription: Transação incluída com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        credit:
          creditId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          amount: ""
          credit_type: 1
          inclusion_date: 2019-07-21T17:32:28Z
    SourceAudit:
      type: object
      properties:
        operatorId:
          type: string
          description: Identificação do operador solicitante. Esta informação é fornecida
            pelo emissor.
          example: "12340985312"
        processId:
          type: string
          description: Identificação do processo solicitante. Esta informação é fornecida
            pelo emissor.
          example: PID-12345
      description: Informações de auditoria para registro de informações. São de extrema
        importância para que se possa rastrear e auditar transações realizadas por
        meio da API.
      example:
        processId: PID-12345
        operatorId: "12340985312"
    NewTransactionRequest:
      required:
      - amount
      - reason
      - transactionType
      type: object
      properties:
        issuerTransactionId:
          type: string
          description: Identificador único do transação. Gerado pelo emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
        amount:
          description: Valor do crédito ou débito a ser adicionado na conta.
          allOf:
          - $ref: '#/components/schemas/Amount'
        reason:
          type: string
          description: Descrição do motivo ou da situação da transação.
          example: Estorno de taxa de anualidade.
    BindCardResult:
      required:
      - account
      - resultData
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão associado à conta com sucesso!
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        account:
          $ref: '#/components/schemas/Account'
      example:
        resultData:
          resultCode: 0
          resultDescription: Cartão associado à conta com sucesso!
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        account:
          psProductCode: "020101"
          accountId: 5566fefb-af25-9984-9fb0-39f6d2021111
          cards:
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          - product: Platinum Internacional
            blockInformation: ""
            bin: "543210"
            profile: credit
            cardholderData:
              cardData:
                embossingName: FULANO DA SILVA
              cardholderType: main
              otherIdentityDocumentNumber:
                identityDocumentNumber: "03873703805"
                issuedBy: SJS
                state: RS
              contactInformation:
                personalPhoneNumber1: +555132214879
                personalPhoneNumber2: +5551912345678
                comercialPhoneNumber1: +555132214879
                email: fulano@silva.com.br
              identityDocumentNumber: "03873703805"
              nationality: Brasil
              gender: male
              fullName: Fulano da Silva
              birthDate: 21/03/1983
              civilStatus: single
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            issuanceDate: 21/07/2019
            issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
            issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
            last4Digits: "1234"
            expirationDate: 12/2028
            status:
              statusDetails: statusDetails
              status: active
          issuerAccountId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          psProductName: BANCO 1 BANDEIRA 1 PRE-PAGO
          accountOwner: ""
          inclusion_date: 2019-07-21T17:32:28Z
          creditInfo:
            creditLimit: ""
            paymentDue: 5
          status: active
    PinChangeRequest:
      required:
      - newPin
      type: object
      properties:
        issuerPINChangeId:
          type: string
          description: Identificador único da requisição de mudança de senha. Gerado
            pelo emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        newPin:
          $ref: '#/components/schemas/Pin'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    Pin:
      required:
      - idTransportKey
      - pinBlock
      type: object
      properties:
        idTransportKey:
          type: string
          description: Identificador da chave de transporte de PIN estabelecido entre
            emissor e paySmart.
          example: "1001"
        pinBlock:
          type: string
          description: PIN cifrado pela chave de transporte de identificador [idTransportKey]
          example: FB340DEA41CD60D1
        format:
          type: string
          description: Formato do PINBlock (Só ISO-0 e ISO-1 são suportados)
          example: ISO-0
          enum:
          - ISO-0
          - ISO-1
    InputPin:
      required:
      - idTransportKey
      - pinBlock
      type: object
      properties:
        idTransportKey:
          type: string
          description: Identificador da chave de transporte de PIN estabelecido entre
            emissor e paySmart.
          example: "1001"
        pinBlock:
          type: string
          description: PIN cifrado pela chave de transporte de identificador [idTransportKey]
          example: FB340DEA41CD60D1
        format:
          type: string
          description: Formato do PINBlock (Opcional - para entrada, apenas ISO-1
            é suportado)
          example: ISO-1
          enum:
          - ISO-1
    CardBlockAndReissueRequest:
      required:
      - blockCode
      type: object
      properties:
        issuerCardBlockId:
          type: string
          description: Identificador único da requisição de bloqueio. Gerado pelo
            emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        issuerCardId:
          type: string
          description: Identificador do novo cartão no emissor
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        extraData:
          type: string
          description: Dados extras para o novo cartão
          example: A/C RECURSOS HUMANOS
        blockCode:
          type: integer
          description: Código identificando o tipo de bloqueio.
          example: 35
        reason:
          type: string
          description: Motivo do bloqueio.
          example: Cartão roubado.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    CardBlockRequest:
      required:
      - blockCode
      type: object
      properties:
        issuerCardBlockId:
          type: string
          description: Identificador único da requisição de bloqueio. Gerado pelo
            emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        blockCode:
          type: integer
          description: Código identificando o tipo de bloqueio.
          example: 35
        reason:
          type: string
          description: Motivo do bloqueio.
          example: Cartão roubado.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    CardUnblockRequest:
      required:
      - unblockCode
      type: object
      properties:
        issuerCardUnblockId:
          type: string
          description: Identificador único da requisição de desbloqueio. Gerado pelo
            emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        unblockCode:
          type: integer
          description: Código identificando o tipo de desbloqueio.
          example: 0
        reason:
          type: string
          description: Motivo do desbloqueio.
          example: Cartão recebido.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    CardReissueRequest:
      type: object
      properties:
        issuerCardId:
          type: string
          description: Identificador do novo cartão no emissor
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        extraData:
          type: string
          description: Dados extras para o novo cartão
          example: A/C RECURSOS HUMANOS
        issuerCardReissueId:
          type: string
          description: Identificador único da requisição de nova via. Gerado pelo
            emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        reason:
          type: string
          description: Motivo da nova via.
          example: Expiração próxima.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    CardBlockInformation:
      required:
      - blockCode
      - blockTime
      - requestedBy
      type: object
      properties:
        blockCode:
          type: integer
          description: Código identificando o tipo de bloqueio.
          example: 35
        requestedBy:
          type: string
          description: Indicação de onde (qual departamento ou papel) partiu o pedido
            de bloqueio.
          example: Usuário APP
        description:
          type: string
          description: Descrição do motivo de bloqueio.
          example: Cartão bloqueado por motivo de perda alegada pelo titular
        blockTime:
          type: string
          description: Data e hora do bloqueio no formato definido pela RFC 3339,
            seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
    CancelVirtualCardRequest:
      required:
      - cancellationCode
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        cancellationCode:
          type: integer
          description: Código identificando o tipo de cancelamento.
          example: 35
        reason:
          type: string
          description: Motivo do cancelamento.
          example: Cliente decidiu cancelar por razões pessoais.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    VirtualCardConstraints:
      required:
      - currency_code
      - expiration_timestamp
      - max_amount
      - usage_limit
      type: object
      properties:
        currency_code:
          type: string
          description: Código da moeda, conforme ISO-4217, Se o valor for "*" (asterisco),
            aceita qualquer moeda.
          example: "986"
          default: "986"
        max_amount:
          type: string
          description: Valor máximo permitido por transação, incluindo os centavos
            sem vírgula. Se o valor for "*" (asterisco), não há limite superior para
            o valor das transações.
          example: "5067"
        usage_limit:
          type: string
          description: Total de transações disponíveis para o Cartão Virtual. Utilize
            "*" (asterisco) para indicar que não deve haver limite no número de transações
            desse cartão.
          example: '*'
        expiration_timestamp:
          type: string
          description: Data de expiração do cartão virtual, no formato YYYY-MM-DD'T'hh:m:ss
          example: 2019-10-17T23:59:59Z
    VirtualCardDescriptor:
      type: object
      properties:
        vCardId:
          type: string
          description: Identificador único do cartão virtual gerado pela paySmart
          example: vcrt-df149372-92c9-420d-ac80-0caca79b46ee
        vPan:
          type: string
          description: PAN do cartão virtual
          example: "550110123456789"
        vDateExp:
          type: string
          description: Data de expiração do cartão virtual no formato MM/yyyy
          example: 03/25
        vCvv:
          type: string
          description: CVV do cartão virtual
          format: ^\d{3}$
          example: "231"
        vCardholder:
          type: string
          description: Nome do portador do cartão, para ser informado nos portais
            de e-commerce
          example: FULANO DA SILVA
    VirtualCardDescriptorGet:
      type: object
      properties:
        vCardId:
          type: string
          description: Identificador único do cartão virtual gerado pela paySmart
          example: vcrt-df149372-92c9-420d-ac80-0caca79b46ee
        vDateExp:
          type: string
          description: Data de expiração do cartão virtual no formato MM/yyyy
          example: 03/2025
    VirtualCardInfo:
      type: object
      properties:
        statusCode:
          type: string
          description: Status do cartão virtual
          example: inactive
          enum:
          - active
          - inactive
          - expired
        cardId:
          type: string
          description: Identificador do cartão real associado ao cartão virtual
          example: 'crt-a474ebd8-903f-4b3f-b59c-8161a306d469 '
        statusDescription:
          type: string
          description: Descrição do status do cartão virtual
          example: Token desativado apos compra
    CreateVirtualCardRequest:
      type: object
      properties:
        issuerRequestId:
          type: string
          description: Identificador único da requisição gerado pelo emissor. Esse
            identificador é ecoado na resposta. Nenhuma verificação dele é feita por
            parte da paySmart, o emissor é livre para escolher o valor que quiser.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
        constraints:
          description: Restrições de operação do cartão virtual que está sendo criado
          allOf:
          - $ref: '#/components/schemas/VirtualCardConstraints'
    CreateVirtualCardResponse:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão virtual criado com sucesso
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        virtualCard:
          allOf:
          - $ref: '#/components/schemas/VirtualCardDescriptor'
      example:
        resultData:
          resultCode: 0
          resultDescription: Cartão virtual criado com sucesso
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        virtualCard: ""
    ComposedVirtualCardInfo:
      type: object
      properties:
        virtual:
          allOf:
          - $ref: '#/components/schemas/VirtualCardDescriptor'
        constraints:
          allOf:
          - $ref: '#/components/schemas/VirtualCardConstraints'
        info:
          allOf:
          - $ref: '#/components/schemas/VirtualCardInfo'
      example:
        virtual: ""
        constraints: ""
        info: ""
    ListVirtualCardsResponse:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Lista de cartões obtida com sucesso
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        virtual_cards_count:
          type: integer
          description: Contagem dos cartões virtuais
          example: 1
        virtual_cards:
          type: array
          description: Lista de cartões virtuais para o cartão real solicitado
          items:
            $ref: '#/components/schemas/ComposedVirtualCardInfo'
      example:
        resultData:
          resultCode: 0
          resultDescription: Lista de cartões obtida com sucesso
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        virtual_cards:
        - virtual: ""
          constraints: ""
          info: ""
        - virtual: ""
          constraints: ""
          info: ""
        virtual_cards_count: 1
    GetVirtualCardResponse:
      type: object
      properties:
        resultData:
          example:
            resultCode: 0
            resultDescription: Cartão virtual recuperado com sucesso
            issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
            psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
          allOf:
          - $ref: '#/components/schemas/ResultData'
        virtual:
          allOf:
          - $ref: '#/components/schemas/VirtualCardDescriptor'
        constraints:
          allOf:
          - $ref: '#/components/schemas/VirtualCardConstraints'
        info:
          allOf:
          - $ref: '#/components/schemas/VirtualCardInfo'
      example:
        virtual: ""
        resultData:
          resultCode: 0
          resultDescription: Cartão virtual recuperado com sucesso
          issuerRequestId: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
          psResponseId: dfd88b95-d28d-49ac-90ba-7ba0b35aebd0
        constraints: ""
        info: ""
    DisputeDocument:
      required:
      - document
      - documentName
      type: object
      properties:
        documentName:
          type: string
          description: Nome do documento auxiliar para a disputa.
          example: log_atendimento
        documentDescription:
          type: string
          description: Descrição do documento.
          example: Log do atendimento comprovando questionamento do comprador.
        document:
          type: string
          description: Documento codificado em base64.
          example: =n{)zZ+)z*q-z6yدzbf<hZ)
    DisputeInfo:
      required:
      - disputeReason
      - disputeStatus
      - disputeType
      type: object
      properties:
        disputeType:
          $ref: '#/components/schemas/DisputeRequest'
        disputeReason:
          $ref: '#/components/schemas/DisputeReason'
        disputeStatus:
          $ref: '#/components/schemas/DisputeStatus'
    DisputeReason:
      type: string
      description: Descrição da razão da disputa.
      example: Transação duplicada.
    DisputeStatus:
      type: string
      description: Estado atual da disputa.
      enum:
      - waiting_for_response_from_issuer
      - waiting_for_response_from_acquirer
      - waiting_for_response_from_brand
      - accepted
      - denied
      - issuer_won
      - issuer_lost
      - canceled_by_issuer
    DisputeType:
      type: string
      description: Tipo de disputa.
      example: card_not_present_fraud
      enum:
      - service_not_offered_or_product_not_delivered
      - recurring_transaction_cancelled
      - product_defective_or_differing_from_description
      - multiple_fraudulent_transactions
      - illegible_document
      - chip_responsability_transference
      - authorization_denied
      - no_authorization
      - expired_card
      - late_presentation
      - holder_does_no_recall_transaction
      - non_existing_card_number
      - incorrect_transaction_value
      - card_present_fraud
      - duplicated_processing
      - card_not_present_fraud
      - credit_not_processed
      - payment_by_other_means
    DisputeRequest:
      required:
      - accountId
      - disputeCode
      - disputeTextMessage
      - transactionId
      type: object
      properties:
        issuerDisputeId:
          type: string
          description: Identificador único da disputa. Gerado pelo emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        accountId:
          type: string
          description: Identificador único da conta atribuído pela paySmart.
          example: 67dac5d8-c1f9-44d6-876a-761ac84db261
        transactionId:
          type: string
          description: Identificador da transação em disputa.
          example: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
        disputeCode:
          type: string
          description: Código da disputa que indica o motivo de abertura.
          format: ^[a-zA-Z0-9][a-zA-Z0-9]$
          example: "30"
        disputeTextMessage:
          type: string
          description: Mensagem de texto justificando a disputa. Conteúdo esperado
            depende do código do motivo da disputa.
          example: Serviço não prestado em 211019
        partial:
          type: boolean
          description: Indica se está sendo disputada uma parte ou o valor total da
            transação. Se for verdadeiro é necessário informar amount_disputed.
          example: false
        amount_disputed:
          description: Valor sendo disputado. Só deve estar presente se a partial
            for true.
          allOf:
          - $ref: '#/components/schemas/Amount'
        willAddDocuments:
          type: boolean
          description: Indica se documentos apoiando a disputa vão ser anexados no
            Portal ELO posteriormente. Campo opcional, por padrão vai ser falso.
          example: false
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
      example:
        issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
        disputeCode: "30"
        accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
        amount_disputed: ""
        disputeTextMessage: Serviço não prestado em 211019
        partial: false
        willAddDocuments: false
        transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
        sourceAudit:
          processId: PID-12345
          operatorId: "12340985312"
    DisputeResponseRequest:
      required:
      - accept
      - disputeResponseTextMessage
      type: object
      properties:
        issuerDisputeResponseId:
          type: string
          description: Identificador único da resposta disputa. Gerado pelo emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        accept:
          type: boolean
          description: Identifica a resposta do credenciador/bandeira deve ser aceita.
            Se não for aceita o processo de disputa vai para a próxima etapa.
          example: false
        disputeResponseTextMessage:
          type: string
          description: Mensagem de texto justificando o motivo da continuação da disputa.
            Só precisa estar presente se accept for falso.
          example: Serviço não prestado em 211019
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    DisputeDocumentRequest:
      required:
      - document
      type: object
      properties:
        issuerDisputeDocumentId:
          type: string
          description: Identificador único do pedido de desistência da disputa. Gerado
            pelo emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        document:
          $ref: '#/components/schemas/DisputeDocument'
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    DisputeReversalRequest:
      type: object
      properties:
        issuerDisputeReversalId:
          type: string
          description: Identificador único do pedido de desistência da disputa. Gerado
            pelo emissor.
          example: a3e4cf3c-2a98-4a88-a370-5429356d7112
        textMessage:
          type: string
          description: Mensagem de texto justificando o motivo da desistência da disputa
            (opcional).
          example: Portador reconheceu compra.
        sourceAudit:
          $ref: '#/components/schemas/SourceAudit'
    Dispute:
      required:
      - currentStage
      - disputeDate
      - disputeRequest
      - disputeStatus
      - disputeType
      type: object
      properties:
        disputeId:
          type: string
          description: Identificador único da disputa na paySmart.
          example: 56dac5d8-c1f9-44d6-876a-761ac84db222
        disputeRequest:
          $ref: '#/components/schemas/DisputeRequest'
        disputeDate:
          type: string
          description: Data e hora da criação da disputa no formato definido pela
            RFC 3339, seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
        disputeMaxDateResponse:
          description: Data máxima para uma resposta no formato dd\/MM\/yyyy
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 28/07/2019
        disputeType:
          $ref: '#/components/schemas/DisputeType'
        disputeStatus:
          $ref: '#/components/schemas/DisputeStatus'
        currentStage:
          type: string
          description: Estágio atual do processo de disputa.
          example: chargeback
        dispute_history:
          type: array
          description: Histórico de eventos nessa disputa.
          items:
            $ref: '#/components/schemas/DisputeEvent'
        transaction:
          $ref: '#/components/schemas/Transaction'
      example:
        currentStage: chargeback
        disputeDate: 2017-07-21T17:32:28Z
        disputeMaxDateResponse: 28/07/2019
        dispute_history:
        - date_sent: 28/07/2019
          description: Credenciador reapresentou transação.
          sent_from: acquirer
        - date_sent: 28/07/2019
          description: Credenciador reapresentou transação.
          sent_from: acquirer
        disputeId: 56dac5d8-c1f9-44d6-876a-761ac84db222
        disputeRequest:
          issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
          disputeCode: "30"
          accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
          amount_disputed: ""
          disputeTextMessage: Serviço não prestado em 211019
          partial: false
          willAddDocuments: false
          transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
          sourceAudit:
            processId: PID-12345
            operatorId: "12340985312"
        disputeStatus: waiting_for_response_from_issuer
        disputeType: card_not_present_fraud
        transaction:
          amount:
            amount: 123
            currencyCode: 986
          merchantCity: SAO PAULO
          transactionDateTime: 2017-07-21T17:32:28Z
          transactionStatus: received
          acquirerTransactionId: "12349087412309847213"
          terminalId: "1234567890"
          mcc: "3501"
          cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
          transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
          merchantName: Padaria do Joaquim.
          merchantUf: SP
          transactionType: sale
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          merchantId: "12345678"
          countryCode: "076"
          merchantAddress: R MANOELITO DE ORNELLAS
          merchantDocumentId: "12345678901234"
          settlementDateTime: 2017-07-21T17:32:28Z
          acquirerId: "04"
          card: ""
          transactionAuthorizationResponse:
            approved: false
            denialReason: ""
          entryMode: emvContact
    DisputeEvent:
      type: object
      properties:
        sent_from:
          type: string
          description: Criador do evento.
          example: acquirer
          enum:
          - issuer
          - acquirer
          - brand
        date_sent:
          description: Data que o evento ocorreu.
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 28/07/2019
        description:
          type: string
          description: Descrição do evento/resposta.
          example: Credenciador reapresentou transação.
      example:
        date_sent: 28/07/2019
        description: Credenciador reapresentou transação.
        sent_from: acquirer
    DisputeListResult:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indica que atingiu o limite de retorno e existem mais elementos
            a serem retornados.
          example: false
        disputes:
          type: array
          description: Lista de disputas.
          items:
            $ref: '#/components/schemas/Dispute'
      example:
        hasMore: false
        disputes:
        - currentStage: chargeback
          disputeDate: 2017-07-21T17:32:28Z
          disputeMaxDateResponse: 28/07/2019
          dispute_history:
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          disputeId: 56dac5d8-c1f9-44d6-876a-761ac84db222
          disputeRequest:
            issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
            disputeCode: "30"
            accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
            amount_disputed: ""
            disputeTextMessage: Serviço não prestado em 211019
            partial: false
            willAddDocuments: false
            transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
            sourceAudit:
              processId: PID-12345
              operatorId: "12340985312"
          disputeStatus: waiting_for_response_from_issuer
          disputeType: card_not_present_fraud
          transaction:
            amount:
              amount: 123
              currencyCode: 986
            merchantCity: SAO PAULO
            transactionDateTime: 2017-07-21T17:32:28Z
            transactionStatus: received
            acquirerTransactionId: "12349087412309847213"
            terminalId: "1234567890"
            mcc: "3501"
            cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
            transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantName: Padaria do Joaquim.
            merchantUf: SP
            transactionType: sale
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantId: "12345678"
            countryCode: "076"
            merchantAddress: R MANOELITO DE ORNELLAS
            merchantDocumentId: "12345678901234"
            settlementDateTime: 2017-07-21T17:32:28Z
            acquirerId: "04"
            card: ""
            transactionAuthorizationResponse:
              approved: false
              denialReason: ""
            entryMode: emvContact
        - currentStage: chargeback
          disputeDate: 2017-07-21T17:32:28Z
          disputeMaxDateResponse: 28/07/2019
          dispute_history:
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          - date_sent: 28/07/2019
            description: Credenciador reapresentou transação.
            sent_from: acquirer
          disputeId: 56dac5d8-c1f9-44d6-876a-761ac84db222
          disputeRequest:
            issuerDisputeId: a3e4cf3c-2a98-4a88-a370-5429356d7112
            disputeCode: "30"
            accountId: 67dac5d8-c1f9-44d6-876a-761ac84db261
            amount_disputed: ""
            disputeTextMessage: Serviço não prestado em 211019
            partial: false
            willAddDocuments: false
            transactionId: c02ef1ca-70fc-4582-9b20-0cfd04d9374b
            sourceAudit:
              processId: PID-12345
              operatorId: "12340985312"
          disputeStatus: waiting_for_response_from_issuer
          disputeType: card_not_present_fraud
          transaction:
            amount:
              amount: 123
              currencyCode: 986
            merchantCity: SAO PAULO
            transactionDateTime: 2017-07-21T17:32:28Z
            transactionStatus: received
            acquirerTransactionId: "12349087412309847213"
            terminalId: "1234567890"
            mcc: "3501"
            cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
            transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantName: Padaria do Joaquim.
            merchantUf: SP
            transactionType: sale
            accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
            merchantId: "12345678"
            countryCode: "076"
            merchantAddress: R MANOELITO DE ORNELLAS
            merchantDocumentId: "12345678901234"
            settlementDateTime: 2017-07-21T17:32:28Z
            acquirerId: "04"
            card: ""
            transactionAuthorizationResponse:
              approved: false
              denialReason: ""
            entryMode: emvContact
    TransactionQueryResult:
      required:
      - accountId
      - amount
      - transactionDateTime
      - transactionId
      - transactionStatus
      - transactionType
      type: object
      properties:
        transactionId:
          type: string
          description: Identificador da transação atribuído pela paySmart.
          example: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
        accountId:
          type: string
          description: Identificador único da conta.
          example: 694cd1e3-19b9-4a25-86b6-9b39e3388520
        transactionDateTime:
          type: string
          description: Data e hora da transação no formato definido pela RFC 3339,
            seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
        settlementDateTime:
          type: string
          description: Data e hora do recebimento na liquidação no formato definido
            pela RFC 3339, seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        transactionStatus:
          $ref: '#/components/schemas/TransactionStatus'
        transactionAuthorizationResponse:
          $ref: '#/components/schemas/TransactionAuthorizationResponse'
        acquirerId:
          type: string
          description: Código de identificação da rede de captura da transação.
          example: "04"
        acquirerTransactionId:
          type: string
          description: Identificador da transação na rede de captura.
          example: "12349087412309847213"
        merchantId:
          type: string
          description: Identificação do estabelecimento informada na autorização.
          example: "12345678"
        merchantName:
          type: string
          description: Nome do estabelecimento.
          example: Padaria do Joaquim.
        merchantDocumentId:
          type: string
          description: CNPJ do estabelecimento.
          example: "12345678901234"
        merchantAddress:
          type: string
          description: Endereço do estabelecimento.
          example: R MANOELITO DE ORNELLAS
        merchantCity:
          type: string
          description: Cidade do estabelecimento.
          example: SAO PAULO
        merchantUf:
          type: string
          description: Uf do estabelecimento
          example: SP
        countryCode:
          type: string
          description: Código do país conforme ISO 3166-1.
          format: ^\d{3}$
          example: "076"
        mcc:
          type: string
          description: MCC da transação
          example: "3501"
        terminalId:
          type: string
          description: Identificação do terminal informada na autorização.
          example: "1234567890"
        amount:
          $ref: '#/components/schemas/Amount'
        entryMode:
          $ref: '#/components/schemas/EntryMode'
        card:
          description: Se transação foi realizada por meio de um cartão, os dados
            do cartão são representados por este campo.
          allOf:
          - $ref: '#/components/schemas/CardQueryResult'
        cancellingTransactionId:
          type: string
          description: Identificador da transação que realizou o estorno dessa transação.
          example: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
      example:
        amount:
          amount: 123
          currencyCode: 986
        merchantCity: SAO PAULO
        transactionDateTime: 2017-07-21T17:32:28Z
        transactionStatus: received
        acquirerTransactionId: "12349087412309847213"
        terminalId: "1234567890"
        mcc: "3501"
        cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
        transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
        merchantName: Padaria do Joaquim.
        merchantUf: SP
        transactionType: sale
        accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
        merchantId: "12345678"
        countryCode: "076"
        merchantAddress: R MANOELITO DE ORNELLAS
        merchantDocumentId: "12345678901234"
        settlementDateTime: 2017-07-21T17:32:28Z
        acquirerId: "04"
        card: ""
        transactionAuthorizationResponse:
          approved: false
          denialReason: ""
        entryMode: emvContact
    CardQueryResult:
      type: object
      properties:
        BIN:
          type: string
          description: BIN do cartão.
          format: ^\d{6}$
          example: "606541"
        last_four_digits:
          type: string
          description: Últimos quatro dígitos do cartão.
          format: ^\d{4}$
          example: "3245"
        cardId:
          type: string
          description: Identificador único do cartão.
          example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
    Transaction:
      required:
      - accountId
      - amount
      - transactionDateTime
      - transactionId
      - transactionStatus
      - transactionType
      type: object
      properties:
        transactionId:
          type: string
          description: Identificador da transação atribuído pela paySmart.
          example: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
        accountId:
          type: string
          description: Identificador único da conta.
          example: 694cd1e3-19b9-4a25-86b6-9b39e3388520
        transactionDateTime:
          type: string
          description: Data e hora da transação no formato definido pela RFC 3339,
            seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
        settlementDateTime:
          type: string
          description: Data e hora do recebimento na liquidação no formato definido
            pela RFC 3339, seção 5.6.
          format: date-time
          example: 2017-07-21T17:32:28Z
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        transactionStatus:
          $ref: '#/components/schemas/TransactionStatus'
        transactionAuthorizationResponse:
          $ref: '#/components/schemas/TransactionAuthorizationResponse'
        acquirerId:
          type: string
          description: Código de identificação da rede de captura da transação.
          example: "04"
        acquirerTransactionId:
          type: string
          description: Identificador da transação na rede de captura.
          example: "12349087412309847213"
        merchantId:
          type: string
          description: Identificação do estabelecimento informada na autorização.
          example: "12345678"
        merchantName:
          type: string
          description: Nome do estabelecimento.
          example: Padaria do Joaquim.
        merchantDocumentId:
          type: string
          description: CNPJ do estabelecimento.
          example: "12345678901234"
        merchantAddress:
          type: string
          description: Endereço do estabelecimento.
          example: R MANOELITO DE ORNELLAS
        merchantCity:
          type: string
          description: Cidade do estabelecimento.
          example: SAO PAULO
        merchantUf:
          type: string
          description: Uf do estabelecimento
          example: SP
        countryCode:
          type: string
          description: Código do país conforme ISO 3166-1.
          format: ^\d{3}$
          example: "076"
        mcc:
          type: string
          description: MCC da transação
          example: "3501"
        terminalId:
          type: string
          description: Identificação do terminal informada na autorização.
          example: "1234567890"
        amount:
          $ref: '#/components/schemas/Amount'
        entryMode:
          $ref: '#/components/schemas/EntryMode'
        card:
          description: Se transação foi realizada por meio de um cartão, os dados
            do cartão são representados por este campo.
          allOf:
          - $ref: '#/components/schemas/Card'
        cancellingTransactionId:
          type: string
          description: Identificador da transação que realizou o estorno dessa transação.
          example: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
      example:
        amount:
          amount: 123
          currencyCode: 986
        merchantCity: SAO PAULO
        transactionDateTime: 2017-07-21T17:32:28Z
        transactionStatus: received
        acquirerTransactionId: "12349087412309847213"
        terminalId: "1234567890"
        mcc: "3501"
        cancellingTransactionId: TSA-694cd1e3-19b9-4a25-86b6-9b39e3388520
        transactionId: TS-694cd1e3-19b9-4a25-86b6-9b39e3388520
        merchantName: Padaria do Joaquim.
        merchantUf: SP
        transactionType: sale
        accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
        merchantId: "12345678"
        countryCode: "076"
        merchantAddress: R MANOELITO DE ORNELLAS
        merchantDocumentId: "12345678901234"
        settlementDateTime: 2017-07-21T17:32:28Z
        acquirerId: "04"
        card: ""
        transactionAuthorizationResponse:
          approved: false
          denialReason: ""
        entryMode: emvContact
    TransactionType:
      type: string
      description: Tipo da transação.
      enum:
      - sale
      - withdrawal
      - debit_adjustment
      - undoing_load_credit
      - loading_credit
      - credit_adjustment
      - sale_chargeback
    TransactionStatus:
      type: string
      description: Status da Transação.
      enum:
      - received
      - posted
      - in_dispute
      - canceled
    TransactionAuthorizationResponse:
      type: object
      properties:
        approved:
          type: boolean
          description: Indica se a transação foi aprovada pelo autorizador.
          example: false
        denialReason:
          description: Razão da negação. Só presente se a approved for false.
          allOf:
          - $ref: '#/components/schemas/TransactionDenialReason'
      description: Resposta do autorizador para a transação
      example:
        approved: false
        denialReason: ""
    TransactionDenialReason:
      type: object
      properties:
        denialCode:
          type: string
          description: Código de negação retornado pelo autorizador.
          format: ^[a-zA-Z0-9][a-zA-Z0-9]$
          example: "51"
        denialDescription:
          type: string
          description: Descrição textual do motivo da negação.
          example: Saldo insuficiente.
    EntryMode:
      type: string
      description: Modo de entrada do PAN na transação.
      enum:
      - emvContact
      - emvContactless
      - hce
      - qrCode
      - ecommerce
      - magstripe
      - manual
    CardStatus:
      type: object
      properties:
        status:
          type: string
          description: Situação do cartão
          example: active
          enum:
          - blocked
          - active
          - cancelled
          - issuing
          - inTransit
          - requested
          - request_denied
          - purged
        statusDetails:
          type: string
          description: Descrição de detalhes da situação.
      example:
        statusDetails: statusDetails
        status: active
    CardListResult:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indica que atingiu o limite de retorno e existem mais elementos
            a serem retornados.
          example: false
        cards:
          type: array
          description: Lista de cartões.
          items:
            $ref: '#/components/schemas/Card'
      example:
        cards:
        - product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
        - product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
        hasMore: false
    CardSingleListResult:
      type: object
      properties:
        cards:
          type: array
          description: Lista de cartões.
          items:
            $ref: '#/components/schemas/Card'
      example:
        cards:
        - product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
        - product: Platinum Internacional
          blockInformation: ""
          bin: "543210"
          profile: credit
          cardholderData:
            cardData:
              embossingName: FULANO DA SILVA
            cardholderType: main
            otherIdentityDocumentNumber:
              identityDocumentNumber: "03873703805"
              issuedBy: SJS
              state: RS
            contactInformation:
              personalPhoneNumber1: +555132214879
              personalPhoneNumber2: +5551912345678
              comercialPhoneNumber1: +555132214879
              email: fulano@silva.com.br
            identityDocumentNumber: "03873703805"
            nationality: Brasil
            gender: male
            fullName: Fulano da Silva
            birthDate: 21/03/1983
            civilStatus: single
          accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
          issuanceDate: 21/07/2019
          issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
          issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
          last4Digits: "1234"
          expirationDate: 12/2028
          status:
            statusDetails: statusDetails
            status: active
    Card:
      required:
      - accountId
      - bin
      - cardId
      - cardholderData
      - expirationDate
      - issuanceDate
      - last4Digits
      - product
      - profile
      - status
      type: object
      properties:
        cardId:
          type: string
          description: Identificador único do cartão.
          example: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
        accountId:
          type: string
          description: Identificador único da conta.
          example: 694cd1e3-19b9-4a25-86b6-9b39e3388520
        issuerCardId:
          type: string
          description: Identificador único para esse cartão no emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        issuerCardHolderId:
          type: string
          description: Identificador único para esse cartão no emissor.
          example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        bin:
          type: string
          description: BIN do cartão (6 a 8 dígitos).
          format: ^\d{6,8}$
          example: "543210"
        last4Digits:
          type: string
          description: Últimos 4 dígitos do cartão.
          format: ^\d{4}$
          example: "1234"
        expirationDate:
          type: string
          description: Data de expiração no formato MM/YYYY
          format: ^\d{2}\/\d{4}$
          example: 12/2028
        cardholderData:
          $ref: '#/components/schemas/CardholderData'
        profile:
          type: string
          description: Perfil do cartão EMV de pagamento.
          example: credit
          enum:
          - credit
          - debit
          - voucher
          - fleet
          - combo
        product:
          type: string
          description: Identifica o tipo de produto do emissor representado pelo cartão.
          example: Platinum Internacional
        status:
          $ref: '#/components/schemas/CardStatus'
        blockInformation:
          description: Informações sobre o bloqueio do cartão. Só presente no caso
            de cartões bloqueados.
          allOf:
          - $ref: '#/components/schemas/CardBlockInformation'
        issuanceDate:
          type: string
          description: Data de emisão no formato dd\/MM\/yyyy
          format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
          example: 21/07/2019
      example:
        product: Platinum Internacional
        blockInformation: ""
        bin: "543210"
        profile: credit
        cardholderData:
          cardData:
            embossingName: FULANO DA SILVA
          cardholderType: main
          otherIdentityDocumentNumber:
            identityDocumentNumber: "03873703805"
            issuedBy: SJS
            state: RS
          contactInformation:
            personalPhoneNumber1: +555132214879
            personalPhoneNumber2: +5551912345678
            comercialPhoneNumber1: +555132214879
            email: fulano@silva.com.br
          identityDocumentNumber: "03873703805"
          nationality: Brasil
          gender: male
          fullName: Fulano da Silva
          birthDate: 21/03/1983
          civilStatus: single
        accountId: 694cd1e3-19b9-4a25-86b6-9b39e3388520
        issuanceDate: 21/07/2019
        issuerCardHolderId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        cardId: 79fcd0e1-08b8-4a25-86b6-9b39e3388276
        issuerCardId: 3866fefb-af25-4c84-9fb0-39f6d202ac42
        last4Digits: "1234"
        expirationDate: 12/2028
        status:
          statusDetails: statusDetails
          status: active
    PublicKey:
      type: object
      properties:
        publicKey:
          type: string
          example: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAma0y916M+NjrVtcdWlivf/zqlQpfGX+l3KMHR0sKEF2h/euH4qNtETpkeG+5+apvy4NyGs7GEgjhy7xWHscmMUJxpNvcEvuIDz9B0RoDyQcctqgpvJLrAo/jf8KvLGHLQqiV3r4JJzuVBlmX3/IlhW3LLpPAm+An5BuJRPtjISqgJbCMm4Zc60uMqfXaNhf36tz78gef2PLwrTfHi8HLNxL62/fThOVQhrJKIaoAOIrHERgyosz2jucXHAN/WQ47yVcSyG/EZJ3MQNIAgN2j4IA7hQCBCeYYTsqFCIPWVY4urtvfMnekI1DG4AP2QwACIS9tjP8fN1fA4evwuFiXTQIDAQAB
        keyId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        expiresIn:
          type: integer
          format: int64
          example: 3600
      example:
        expiresIn: 3600
        keyId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        publicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAma0y916M+NjrVtcdWlivf/zqlQpfGX+l3KMHR0sKEF2h/euH4qNtETpkeG+5+apvy4NyGs7GEgjhy7xWHscmMUJxpNvcEvuIDz9B0RoDyQcctqgpvJLrAo/jf8KvLGHLQqiV3r4JJzuVBlmX3/IlhW3LLpPAm+An5BuJRPtjISqgJbCMm4Zc60uMqfXaNhf36tz78gef2PLwrTfHi8HLNxL62/fThOVQhrJKIaoAOIrHERgyosz2jucXHAN/WQ47yVcSyG/EZJ3MQNIAgN2j4IA7hQCBCeYYTsqFCIPWVY4urtvfMnekI1DG4AP2QwACIS9tjP8fN1fA4evwuFiXTQIDAQAB
    UnprocessedEntity:
      type: object
      properties:
        code:
          type: string
          example: "010"
        description:
          type: string
          example: Transação não autorizada pela bandeira
    PreconditionFailed:
      type: object
      properties:
        code:
          type: string
          example: "001"
        description:
          type: string
          example: Chave expirada
    PaymentCardParams:
      required:
      - cipheredInformation
      - keyId
      - qrCode
      type: object
      properties:
        keyId:
          type: string
          description: Identificador da chave pública usada para cifrar os dados de
            pagamento. Essa chave tem ter sido obtida em algum ponto através de uma
            chamada de /qrcode/publickey.
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        cipheredInformation:
          type: string
          description: 'Dados do cartão e do portador, cifrados pela chave pública.
            Os dados devem estar no formato JSON, porém removendo os espaços em branco
            entre os campos, como evidenciado nesse exemplo: {"cardHolder":{"card":{"pan":"6550001020301234","expiry":{"month":"01","year":"2021"},"name":"JOAO
            SILVA","csc":"123"},"cpf":"18535908005"}}'
          example: jZTVXUrZlbHJCyBezopll/rNhNi9GYOsWB19gjJylFJ2CzXbq12P8M1f5/OTrYz9PeYlgCsZ+hnbPBklo0ICv1R+0jMhdaIMPLpaCJnPeLPpcFXrGOGPaKeWwTDb+79uulUgm0r+YWfM3IrQGFJ5hxmFblFjV9TClLvYGZoa2h+BIYkcabaozfnupLKqHgx0PBZQj+RnOpbfAh9HEUjeukofd92+U9kQk5grDUP9iUwqZyOIuzxAjH9pgKPc69weEyeDe7ukKM/uHnrstpEa2iI4/L4MG5AR2go4ReA/Tqp2GSNAQa8T8shFQ0mQJuV1fG/Q6FkG0CjYaU9kRXLWhg==
        qrCode:
          type: string
          description: String do QR Code.
          example: 00020104141234567890123426660014BR.GOV.BCB.PIX014466756C616E6F32303139406578616D706C652E636F6D27300012BR.COM.OUTRO011001234567895204000053039865406123.455802BR5915NOMEDORECEBEDOR6008BRASILIA61087007490062530515RP12345678-201950300017BR.GOV.BCB.BRCODE01051.0.080450014BR.GOV.BCB.PIX0123PADRAO.URL.PIX/0123ABCD81390012BR.COM.OUTRO01190123.ABCD.3456.WXYZ6304EB76
        receiveCallback:
          type: boolean
          description: Parâmetro opcional. Um booleano indicando se a resposta desse
            pagamento deve ser recebida como callback (valor true) ao invés de ser
            recebida diretamente na resposta desse endpoint. Por padrão o valor é
            falso, e sugerimos que ele seja mantido assim nas primeiras implementações
            do uso do pagamento por QR Code.
          example: false
    TransactionInfo:
      type: object
      properties:
        type:
          type: string
          example: PAYMENT
        reference_label:
          type: string
          example: RP12345678-2020
        merchant_id:
          type: string
          example: "153169091000000"
        terminal_id:
          type: string
          example: 0H5U6U2K
        authorization_code:
          type: string
          example: "00"
        authentication_code:
          type: string
          example: mKsYAQHPAZGBgf0=
        host_nsu:
          type: string
          example: "109210"
        terminal_nsu:
          type: string
          example: "311412"
        approval_timestamp:
          type: string
          example: 2020-10-13T17:32:21.191Z
      example:
        authentication_code: mKsYAQHPAZGBgf0=
        host_nsu: "109210"
        terminal_nsu: "311412"
        authorization_code: "00"
        approval_timestamp: 2020-10-13T17:32:21.191Z
        merchant_id: "153169091000000"
        type: PAYMENT
        terminal_id: 0H5U6U2K
        reference_label: RP12345678-2020
    QRCODEError:
      type: object
      properties:
        code:
          type: string
          example: "00"
        description:
          type: string
          example: Sucesso
      example:
        code: "00"
        description: Sucesso
    PaymentCard:
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
        error:
          $ref: '#/components/schemas/QRCODEError'
        transaction_info:
          $ref: '#/components/schemas/TransactionInfo'
      example:
        error:
          code: "00"
          description: Sucesso
        transaction_info:
          authentication_code: mKsYAQHPAZGBgf0=
          host_nsu: "109210"
          terminal_nsu: "311412"
          authorization_code: "00"
          approval_timestamp: 2020-10-13T17:32:21.191Z
          merchant_id: "153169091000000"
          type: PAYMENT
          terminal_id: 0H5U6U2K
          reference_label: RP12345678-2020
        status: SUCCESS
    TransactionId:
      type: object
      properties:
        transaction_id:
          type: string
          example: c8c2876c-5e93-4d1c-a5e5-381cf7348770
    BadRequestError:
      type: array
      items:
        $ref: '#/components/schemas/BadRequestError_inner'
    BadRequestError_inner:
      properties:
        code:
          type: string
          example: "001"
        description:
          type: string
          example: campo merchantCategoryCode inválido
  parameters:
    IdempotencyKey:
      name: IdempotencyKey
      in: header
      description: A API suporta idempotência para que, após um erro de conexão, por
        exemplo, se possa tentar novamente requisições POST sem acidentalmente efetuar
        a mesma operação duas vezes. Para indicar uma requisição é idempotente, envie
        uma IdempotencyKey no header da requisição com uma chave única (recomendamos
        UUIDs V4).
      required: false
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 4dd71cca-d89a-4cc0-8e16-f524da933437
    AccountId:
      name: accountId
      in: path
      description: Identificador da conta.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
    TransactionId:
      name: transactionId
      in: path
      description: Identificador da transação.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: 639f4187-a0eb-47f7-89eb-0b42ca3f51dc
    DisputeId:
      name: disputeId
      in: path
      description: Identificador da disputa.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: 2b0dac66-79f9-4d9d-a48b-a91e9921a8d3
    CardId:
      name: cardId
      in: path
      description: Identificador do cartão.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
    VCardId:
      name: vCardId
      in: path
      description: Identificador do cartão virtual.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: 4a6c5ff7-3d5a-44bd-a4f6-767842e49e96
    CardholderId:
      name: cardholderId
      in: path
      description: Identificador do portador.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
    BeginningDate_Query:
      name: beginning_date
      in: query
      description: Data indicando o primeiro dia cujos dados devem ser retornados.
      required: true
      style: form
      explode: true
      schema:
        type: string
        description: Data no formato yyyy-MM-DD
        example: 2020-07-02
    EndingDate_Query:
      name: ending_date
      in: query
      description: Data indicando o último dia cujos dados devem ser retornados.
      required: true
      style: form
      explode: true
      schema:
        type: string
        description: Data no formato yyyy-MM-DD
        example: 2020-07-09
    EndDate_Query:
      name: end_date
      in: query
      description: Data indicando o último dia cujos dados devem ser retornados.
      required: true
      style: form
      explode: true
      schema:
        type: string
        description: Data no formato yyyy-MM-DD
        example: 2020-07-09
    BeginningDateTime_Query:
      name: beginning_date_time
      in: query
      description: Data e hora para iniciar procura.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    EndingDateTime_Query:
      name: ending_date_time
      in: query
      description: Data e hora para parar procura.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    IncludedSince_Query:
      name: included_since
      in: query
      description: Procura contas incluídas depois dessa data.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    IssuanceDate_Query:
      name: issued_on_or_after_date
      in: query
      description: Data indicando que só cartões emitidos depois dessa data vão ser
        retornados
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: Data de emisão no formato dd\/MM\/yyyy
        format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
        example: 21/07/2019
    Month_Query:
      name: month
      in: query
      description: Data indicando que um mês, no formato MM/yyyy.
      required: true
      style: form
      explode: true
      schema:
        type: string
        description: Data no formato MM/yyyy
        format: ^(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
        example: 07/2019
    ClosingDate_Query:
      name: closing_date_query
      in: query
      description: Data indicando que só faturas que fecharam nessa data devem ser
        retornadas. No formato dd/MM/yyyy.
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: Data de emisão no formato dd\/MM\/yyyy
        format: ^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$
        example: 21/07/2019
    MinimumAmount_Query:
      name: minimum_amount
      in: query
      description: Valor mínimo, omitindo a vírgula. Por exemplo, R$ 1,23 ficaria
        "amount":123
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int64
        example: 123
    MaxAmount_Query:
      name: max_amount
      in: query
      description: Valor máximo, omitindo a vírgula. Por exemplo, R$ 1,23 ficaria
        "amount":123
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int64
        example: 123
    CardholderId_Query:
      name: cardholder_id
      in: query
      description: Identificador do portador.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
    IssuerAccountId_Query:
      name: issuer_id
      in: query
      description: Identificador da conta fornecido pelo emissor na sua criação.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 41cab09a-c20a-46d0-883a-8b2a359fc4ad
    PsProdutCode_Query:
      name: ps_product_code
      in: query
      description: Código do produto fornecido pela paySmart.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: "020101"
    IdentityDocumentNumber_Query:
      name: identity_document_number
      in: query
      description: No Brasil, usar CPF ou CNPJ.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: ^\d{11,14}$
        example: "03873703805"
    Last4_Query:
      name: pan_last_4_digits
      in: query
      description: Últimos 4 dígitos do cartão.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: ^\d{4}$
        example: "1234"
    IssuerCardId_Query:
      name: issuer_id
      in: query
      description: Identificador do cartão fornecido pelo emissor na sua criação.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 3866fefb-af25-4c84-9fb0-39f6d202ac42
    TransactionEntryMode_Query:
      name: transaction_mode
      in: query
      description: Modo da transação.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/EntryMode'
    TransactionType_Query:
      name: transaction_type
      in: query
      description: Tipo das transações a serem retornadas.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/TransactionType'
    TransactionStatus_Query:
      name: transaction_status
      in: query
      description: Status das transações a serem retornadas.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/TransactionStatus'
    TransactionApproved_Query:
      name: transaction_approved
      in: query
      description: Se a transação foi aprovada pelo autorizador.
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    TransactionDenialCode_Query:
      name: transaction_denial_code
      in: query
      description: Transações negadas no autorizador com um código específico.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: ^[a-zA-Z0-9][a-zA-Z0-9]$
        example: "true"
    DisputeType_Query:
      name: dispute_type
      in: query
      description: Tipo das disputas a serem retornadas.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/DisputeType'
    DisputeCode_Query:
      name: dispute_reason
      in: query
      description: Código do motivo das disputas a serem retornadas.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/disputeCode'
    DisputeReason_Query:
      name: dispute_reason
      in: query
      description: Razão das disputas a serem retornadas.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/DisputeReason'
    DisputeStatus_Query:
      name: dispute_status
      in: query
      description: Status das disputas a serem retornadas.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/DisputeStatus'
    DisputesDayLeft_Query:
      name: dispute_days_left
      in: query
      description: Tempo restante para próxima resposta.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 10
    Limit_Query:
      name: limit
      in: query
      description: Número limite de objetos retornados. O valor deve ser entre 1 e
        100.
      required: false
      style: form
      explode: true
      schema:
        maximum: 100
        minimum: 1
        type: integer
        example: 10
        default: 10
    StartingAfter_Query:
      name: starting_after
      in: query
      description: Um cursor para uso em paginação. {starting_after} é o identificador
        único do objeto a partir do qual se quer listar. Por exemplo, se houve um
        retorno de uma lista de 100 objetos para esta chamada sendo que o último possui
        identificador "obj1234", para se obter a página use "starting_after=obj1234".
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
    EndingBefore_Query:
      name: ending_before
      in: query
      description: Um cursor para uso em paginação. {ending_before} é o identificador
        único do objeto a partir do qual se quer listar os anteriores. Por exemplo,
        se houve um retorno de uma lista de 100 objetos para esta chamada sendo que
        o primeiro possui identificador "obj1234", para se obter a página anterior
        use "ending_before=obj1234".
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: f40c27d5-07b0-431f-bc14-4bf8aeffb8e9
    FullName_Query:
      name: full_name
      in: query
      description: Nome completo do titular.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: Fulano da Silva
    AccountStatus_Query:
      name: account_status
      in: query
      description: Status da conta.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/AccountStatus'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key

