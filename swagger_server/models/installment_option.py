# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.amount import Amount  # noqa: F401,E501
from swagger_server.models.cet import CET  # noqa: F401,E501
from swagger_server import util


class InstallmentOption(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, num_installments: int=None, installment_amount: Amount=None, total_amount: Amount=None, cet: CET=None):  # noqa: E501
        """InstallmentOption - a model defined in Swagger

        :param num_installments: The num_installments of this InstallmentOption.  # noqa: E501
        :type num_installments: int
        :param installment_amount: The installment_amount of this InstallmentOption.  # noqa: E501
        :type installment_amount: Amount
        :param total_amount: The total_amount of this InstallmentOption.  # noqa: E501
        :type total_amount: Amount
        :param cet: The cet of this InstallmentOption.  # noqa: E501
        :type cet: CET
        """
        self.swagger_types = {
            'num_installments': int,
            'installment_amount': Amount,
            'total_amount': Amount,
            'cet': CET
        }

        self.attribute_map = {
            'num_installments': 'numInstallments',
            'installment_amount': 'installmentAmount',
            'total_amount': 'totalAmount',
            'cet': 'CET'
        }
        self._num_installments = num_installments
        self._installment_amount = installment_amount
        self._total_amount = total_amount
        self._cet = cet

    @classmethod
    def from_dict(cls, dikt) -> 'InstallmentOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InstallmentOption of this InstallmentOption.  # noqa: E501
        :rtype: InstallmentOption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_installments(self) -> int:
        """Gets the num_installments of this InstallmentOption.

        Número de parcelas.  # noqa: E501

        :return: The num_installments of this InstallmentOption.
        :rtype: int
        """
        return self._num_installments

    @num_installments.setter
    def num_installments(self, num_installments: int):
        """Sets the num_installments of this InstallmentOption.

        Número de parcelas.  # noqa: E501

        :param num_installments: The num_installments of this InstallmentOption.
        :type num_installments: int
        """
        if num_installments is None:
            raise ValueError("Invalid value for `num_installments`, must not be `None`")  # noqa: E501

        self._num_installments = num_installments

    @property
    def installment_amount(self) -> Amount:
        """Gets the installment_amount of this InstallmentOption.


        :return: The installment_amount of this InstallmentOption.
        :rtype: Amount
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount: Amount):
        """Sets the installment_amount of this InstallmentOption.


        :param installment_amount: The installment_amount of this InstallmentOption.
        :type installment_amount: Amount
        """
        if installment_amount is None:
            raise ValueError("Invalid value for `installment_amount`, must not be `None`")  # noqa: E501

        self._installment_amount = installment_amount

    @property
    def total_amount(self) -> Amount:
        """Gets the total_amount of this InstallmentOption.


        :return: The total_amount of this InstallmentOption.
        :rtype: Amount
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount: Amount):
        """Sets the total_amount of this InstallmentOption.


        :param total_amount: The total_amount of this InstallmentOption.
        :type total_amount: Amount
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def cet(self) -> CET:
        """Gets the cet of this InstallmentOption.


        :return: The cet of this InstallmentOption.
        :rtype: CET
        """
        return self._cet

    @cet.setter
    def cet(self, cet: CET):
        """Sets the cet of this InstallmentOption.


        :param cet: The cet of this InstallmentOption.
        :type cet: CET
        """
        if cet is None:
            raise ValueError("Invalid value for `cet`, must not be `None`")  # noqa: E501

        self._cet = cet
