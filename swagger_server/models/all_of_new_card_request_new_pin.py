# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.input_pin import InputPin  # noqa: F401,E501
from swagger_server import util


class AllOfNewCardRequestNewPin(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_transport_key: str=None, pin_block: str=None, format: str=None):  # noqa: E501
        """AllOfNewCardRequestNewPin - a model defined in Swagger

        :param id_transport_key: The id_transport_key of this AllOfNewCardRequestNewPin.  # noqa: E501
        :type id_transport_key: str
        :param pin_block: The pin_block of this AllOfNewCardRequestNewPin.  # noqa: E501
        :type pin_block: str
        :param format: The format of this AllOfNewCardRequestNewPin.  # noqa: E501
        :type format: str
        """
        self.swagger_types = {
            'id_transport_key': str,
            'pin_block': str,
            'format': str
        }

        self.attribute_map = {
            'id_transport_key': 'idTransportKey',
            'pin_block': 'pinBlock',
            'format': 'format'
        }
        self._id_transport_key = id_transport_key
        self._pin_block = pin_block
        self._format = format

    @classmethod
    def from_dict(cls, dikt) -> 'AllOfNewCardRequestNewPin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllOfNewCardRequestNewPin of this AllOfNewCardRequestNewPin.  # noqa: E501
        :rtype: AllOfNewCardRequestNewPin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_transport_key(self) -> str:
        """Gets the id_transport_key of this AllOfNewCardRequestNewPin.

        Identificador da chave de transporte de PIN estabelecido entre emissor e paySmart.  # noqa: E501

        :return: The id_transport_key of this AllOfNewCardRequestNewPin.
        :rtype: str
        """
        return self._id_transport_key

    @id_transport_key.setter
    def id_transport_key(self, id_transport_key: str):
        """Sets the id_transport_key of this AllOfNewCardRequestNewPin.

        Identificador da chave de transporte de PIN estabelecido entre emissor e paySmart.  # noqa: E501

        :param id_transport_key: The id_transport_key of this AllOfNewCardRequestNewPin.
        :type id_transport_key: str
        """
        if id_transport_key is None:
            raise ValueError("Invalid value for `id_transport_key`, must not be `None`")  # noqa: E501

        self._id_transport_key = id_transport_key

    @property
    def pin_block(self) -> str:
        """Gets the pin_block of this AllOfNewCardRequestNewPin.

        PIN cifrado pela chave de transporte de identificador [idTransportKey]  # noqa: E501

        :return: The pin_block of this AllOfNewCardRequestNewPin.
        :rtype: str
        """
        return self._pin_block

    @pin_block.setter
    def pin_block(self, pin_block: str):
        """Sets the pin_block of this AllOfNewCardRequestNewPin.

        PIN cifrado pela chave de transporte de identificador [idTransportKey]  # noqa: E501

        :param pin_block: The pin_block of this AllOfNewCardRequestNewPin.
        :type pin_block: str
        """
        if pin_block is None:
            raise ValueError("Invalid value for `pin_block`, must not be `None`")  # noqa: E501

        self._pin_block = pin_block

    @property
    def format(self) -> str:
        """Gets the format of this AllOfNewCardRequestNewPin.

        Formato do PINBlock (Opcional - para entrada, apenas ISO-1 é suportado)  # noqa: E501

        :return: The format of this AllOfNewCardRequestNewPin.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this AllOfNewCardRequestNewPin.

        Formato do PINBlock (Opcional - para entrada, apenas ISO-1 é suportado)  # noqa: E501

        :param format: The format of this AllOfNewCardRequestNewPin.
        :type format: str
        """
        allowed_values = ["ISO-1"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format
