# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server import util


class NewAnonymousCardRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_request_id: str=None, issuer_card_id: str=None, ps_product_code: str=None, delivery_kit_code: float=None, extra_data: str=None, card_delivery_address: AllOfNewAnonymousCardRequestCardDeliveryAddress=None, embossing_name: str=None, source_audit: SourceAudit=None):  # noqa: E501
        """NewAnonymousCardRequest - a model defined in Swagger

        :param issuer_request_id: The issuer_request_id of this NewAnonymousCardRequest.  # noqa: E501
        :type issuer_request_id: str
        :param issuer_card_id: The issuer_card_id of this NewAnonymousCardRequest.  # noqa: E501
        :type issuer_card_id: str
        :param ps_product_code: The ps_product_code of this NewAnonymousCardRequest.  # noqa: E501
        :type ps_product_code: str
        :param delivery_kit_code: The delivery_kit_code of this NewAnonymousCardRequest.  # noqa: E501
        :type delivery_kit_code: float
        :param extra_data: The extra_data of this NewAnonymousCardRequest.  # noqa: E501
        :type extra_data: str
        :param card_delivery_address: The card_delivery_address of this NewAnonymousCardRequest.  # noqa: E501
        :type card_delivery_address: AllOfNewAnonymousCardRequestCardDeliveryAddress
        :param embossing_name: The embossing_name of this NewAnonymousCardRequest.  # noqa: E501
        :type embossing_name: str
        :param source_audit: The source_audit of this NewAnonymousCardRequest.  # noqa: E501
        :type source_audit: SourceAudit
        """
        self.swagger_types = {
            'issuer_request_id': str,
            'issuer_card_id': str,
            'ps_product_code': str,
            'delivery_kit_code': float,
            'extra_data': str,
            'card_delivery_address': AllOfNewAnonymousCardRequestCardDeliveryAddress,
            'embossing_name': str,
            'source_audit': SourceAudit
        }

        self.attribute_map = {
            'issuer_request_id': 'issuerRequestId',
            'issuer_card_id': 'issuerCardId',
            'ps_product_code': 'psProductCode',
            'delivery_kit_code': 'deliveryKitCode',
            'extra_data': 'extraData',
            'card_delivery_address': 'cardDeliveryAddress',
            'embossing_name': 'embossingName',
            'source_audit': 'sourceAudit'
        }
        self._issuer_request_id = issuer_request_id
        self._issuer_card_id = issuer_card_id
        self._ps_product_code = ps_product_code
        self._delivery_kit_code = delivery_kit_code
        self._extra_data = extra_data
        self._card_delivery_address = card_delivery_address
        self._embossing_name = embossing_name
        self._source_audit = source_audit

    @classmethod
    def from_dict(cls, dikt) -> 'NewAnonymousCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewAnonymousCardRequest of this NewAnonymousCardRequest.  # noqa: E501
        :rtype: NewAnonymousCardRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_request_id(self) -> str:
        """Gets the issuer_request_id of this NewAnonymousCardRequest.

        Identificador único da requisição gerado pelo emissor. Esse identificador é ecoado na resposta. Nenhuma verificação dele é feita por parte da paySmart, o emissor é livre para escolher o valor que quiser.  # noqa: E501

        :return: The issuer_request_id of this NewAnonymousCardRequest.
        :rtype: str
        """
        return self._issuer_request_id

    @issuer_request_id.setter
    def issuer_request_id(self, issuer_request_id: str):
        """Sets the issuer_request_id of this NewAnonymousCardRequest.

        Identificador único da requisição gerado pelo emissor. Esse identificador é ecoado na resposta. Nenhuma verificação dele é feita por parte da paySmart, o emissor é livre para escolher o valor que quiser.  # noqa: E501

        :param issuer_request_id: The issuer_request_id of this NewAnonymousCardRequest.
        :type issuer_request_id: str
        """

        self._issuer_request_id = issuer_request_id

    @property
    def issuer_card_id(self) -> str:
        """Gets the issuer_card_id of this NewAnonymousCardRequest.

        Identificador único para esse cartão no emissor.  # noqa: E501

        :return: The issuer_card_id of this NewAnonymousCardRequest.
        :rtype: str
        """
        return self._issuer_card_id

    @issuer_card_id.setter
    def issuer_card_id(self, issuer_card_id: str):
        """Sets the issuer_card_id of this NewAnonymousCardRequest.

        Identificador único para esse cartão no emissor.  # noqa: E501

        :param issuer_card_id: The issuer_card_id of this NewAnonymousCardRequest.
        :type issuer_card_id: str
        """

        self._issuer_card_id = issuer_card_id

    @property
    def ps_product_code(self) -> str:
        """Gets the ps_product_code of this NewAnonymousCardRequest.

        Código do produto. Este código é fornecido pela paySmart para o emissor.  # noqa: E501

        :return: The ps_product_code of this NewAnonymousCardRequest.
        :rtype: str
        """
        return self._ps_product_code

    @ps_product_code.setter
    def ps_product_code(self, ps_product_code: str):
        """Sets the ps_product_code of this NewAnonymousCardRequest.

        Código do produto. Este código é fornecido pela paySmart para o emissor.  # noqa: E501

        :param ps_product_code: The ps_product_code of this NewAnonymousCardRequest.
        :type ps_product_code: str
        """
        if ps_product_code is None:
            raise ValueError("Invalid value for `ps_product_code`, must not be `None`")  # noqa: E501

        self._ps_product_code = ps_product_code

    @property
    def delivery_kit_code(self) -> float:
        """Gets the delivery_kit_code of this NewAnonymousCardRequest.

        Código numérico de até seis dígitos combinado entre emissor, paySmart e gráfica, para determinar a arte do cartão.  # noqa: E501

        :return: The delivery_kit_code of this NewAnonymousCardRequest.
        :rtype: float
        """
        return self._delivery_kit_code

    @delivery_kit_code.setter
    def delivery_kit_code(self, delivery_kit_code: float):
        """Sets the delivery_kit_code of this NewAnonymousCardRequest.

        Código numérico de até seis dígitos combinado entre emissor, paySmart e gráfica, para determinar a arte do cartão.  # noqa: E501

        :param delivery_kit_code: The delivery_kit_code of this NewAnonymousCardRequest.
        :type delivery_kit_code: float
        """

        self._delivery_kit_code = delivery_kit_code

    @property
    def extra_data(self) -> str:
        """Gets the extra_data of this NewAnonymousCardRequest.

        Campo livre que pode assumir o significado desejado pelo emissor, conforme combinação prévia com paySmart e gráfica (exexmplo - código de barras, recebimento de lotes, etc.)  # noqa: E501

        :return: The extra_data of this NewAnonymousCardRequest.
        :rtype: str
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data: str):
        """Sets the extra_data of this NewAnonymousCardRequest.

        Campo livre que pode assumir o significado desejado pelo emissor, conforme combinação prévia com paySmart e gráfica (exexmplo - código de barras, recebimento de lotes, etc.)  # noqa: E501

        :param extra_data: The extra_data of this NewAnonymousCardRequest.
        :type extra_data: str
        """

        self._extra_data = extra_data

    @property
    def card_delivery_address(self) -> AllOfNewAnonymousCardRequestCardDeliveryAddress:
        """Gets the card_delivery_address of this NewAnonymousCardRequest.

        Endereço para entrega do cartão.  # noqa: E501

        :return: The card_delivery_address of this NewAnonymousCardRequest.
        :rtype: AllOfNewAnonymousCardRequestCardDeliveryAddress
        """
        return self._card_delivery_address

    @card_delivery_address.setter
    def card_delivery_address(self, card_delivery_address: AllOfNewAnonymousCardRequestCardDeliveryAddress):
        """Sets the card_delivery_address of this NewAnonymousCardRequest.

        Endereço para entrega do cartão.  # noqa: E501

        :param card_delivery_address: The card_delivery_address of this NewAnonymousCardRequest.
        :type card_delivery_address: AllOfNewAnonymousCardRequestCardDeliveryAddress
        """
        if card_delivery_address is None:
            raise ValueError("Invalid value for `card_delivery_address`, must not be `None`")  # noqa: E501

        self._card_delivery_address = card_delivery_address

    @property
    def embossing_name(self) -> str:
        """Gets the embossing_name of this NewAnonymousCardRequest.

        Nome do portador que deve ser gravado na personalização do cartão. Campo opcional.  # noqa: E501

        :return: The embossing_name of this NewAnonymousCardRequest.
        :rtype: str
        """
        return self._embossing_name

    @embossing_name.setter
    def embossing_name(self, embossing_name: str):
        """Sets the embossing_name of this NewAnonymousCardRequest.

        Nome do portador que deve ser gravado na personalização do cartão. Campo opcional.  # noqa: E501

        :param embossing_name: The embossing_name of this NewAnonymousCardRequest.
        :type embossing_name: str
        """

        self._embossing_name = embossing_name

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this NewAnonymousCardRequest.


        :return: The source_audit of this NewAnonymousCardRequest.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this NewAnonymousCardRequest.


        :param source_audit: The source_audit of this NewAnonymousCardRequest.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit
