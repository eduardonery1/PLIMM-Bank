# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PaymentCardParams(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, key_id: str=None, ciphered_information: str=None, qr_code: str=None, receive_callback: bool=None):  # noqa: E501
        """PaymentCardParams - a model defined in Swagger

        :param key_id: The key_id of this PaymentCardParams.  # noqa: E501
        :type key_id: str
        :param ciphered_information: The ciphered_information of this PaymentCardParams.  # noqa: E501
        :type ciphered_information: str
        :param qr_code: The qr_code of this PaymentCardParams.  # noqa: E501
        :type qr_code: str
        :param receive_callback: The receive_callback of this PaymentCardParams.  # noqa: E501
        :type receive_callback: bool
        """
        self.swagger_types = {
            'key_id': str,
            'ciphered_information': str,
            'qr_code': str,
            'receive_callback': bool
        }

        self.attribute_map = {
            'key_id': 'keyId',
            'ciphered_information': 'cipheredInformation',
            'qr_code': 'qrCode',
            'receive_callback': 'receiveCallback'
        }
        self._key_id = key_id
        self._ciphered_information = ciphered_information
        self._qr_code = qr_code
        self._receive_callback = receive_callback

    @classmethod
    def from_dict(cls, dikt) -> 'PaymentCardParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaymentCardParams of this PaymentCardParams.  # noqa: E501
        :rtype: PaymentCardParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self) -> str:
        """Gets the key_id of this PaymentCardParams.

        Identificador da chave pública usada para cifrar os dados de pagamento. Essa chave tem ter sido obtida em algum ponto através de uma chamada de /qrcode/publickey.  # noqa: E501

        :return: The key_id of this PaymentCardParams.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id: str):
        """Sets the key_id of this PaymentCardParams.

        Identificador da chave pública usada para cifrar os dados de pagamento. Essa chave tem ter sido obtida em algum ponto através de uma chamada de /qrcode/publickey.  # noqa: E501

        :param key_id: The key_id of this PaymentCardParams.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")  # noqa: E501

        self._key_id = key_id

    @property
    def ciphered_information(self) -> str:
        """Gets the ciphered_information of this PaymentCardParams.

        Dados do cartão e do portador, cifrados pela chave pública. Os dados devem estar no formato JSON, porém removendo os espaços em branco entre os campos, como evidenciado nesse exemplo: {\"cardHolder\":{\"card\":{\"pan\":\"6550001020301234\",\"expiry\":{\"month\":\"01\",\"year\":\"2021\"},\"name\":\"JOAO SILVA\",\"csc\":\"123\"},\"cpf\":\"18535908005\"}}  # noqa: E501

        :return: The ciphered_information of this PaymentCardParams.
        :rtype: str
        """
        return self._ciphered_information

    @ciphered_information.setter
    def ciphered_information(self, ciphered_information: str):
        """Sets the ciphered_information of this PaymentCardParams.

        Dados do cartão e do portador, cifrados pela chave pública. Os dados devem estar no formato JSON, porém removendo os espaços em branco entre os campos, como evidenciado nesse exemplo: {\"cardHolder\":{\"card\":{\"pan\":\"6550001020301234\",\"expiry\":{\"month\":\"01\",\"year\":\"2021\"},\"name\":\"JOAO SILVA\",\"csc\":\"123\"},\"cpf\":\"18535908005\"}}  # noqa: E501

        :param ciphered_information: The ciphered_information of this PaymentCardParams.
        :type ciphered_information: str
        """
        if ciphered_information is None:
            raise ValueError("Invalid value for `ciphered_information`, must not be `None`")  # noqa: E501

        self._ciphered_information = ciphered_information

    @property
    def qr_code(self) -> str:
        """Gets the qr_code of this PaymentCardParams.

        String do QR Code.  # noqa: E501

        :return: The qr_code of this PaymentCardParams.
        :rtype: str
        """
        return self._qr_code

    @qr_code.setter
    def qr_code(self, qr_code: str):
        """Sets the qr_code of this PaymentCardParams.

        String do QR Code.  # noqa: E501

        :param qr_code: The qr_code of this PaymentCardParams.
        :type qr_code: str
        """
        if qr_code is None:
            raise ValueError("Invalid value for `qr_code`, must not be `None`")  # noqa: E501

        self._qr_code = qr_code

    @property
    def receive_callback(self) -> bool:
        """Gets the receive_callback of this PaymentCardParams.

        Parâmetro opcional. Um booleano indicando se a resposta desse pagamento deve ser recebida como callback (valor true) ao invés de ser recebida diretamente na resposta desse endpoint. Por padrão o valor é falso, e sugerimos que ele seja mantido assim nas primeiras implementações do uso do pagamento por QR Code.  # noqa: E501

        :return: The receive_callback of this PaymentCardParams.
        :rtype: bool
        """
        return self._receive_callback

    @receive_callback.setter
    def receive_callback(self, receive_callback: bool):
        """Sets the receive_callback of this PaymentCardParams.

        Parâmetro opcional. Um booleano indicando se a resposta desse pagamento deve ser recebida como callback (valor true) ao invés de ser recebida diretamente na resposta desse endpoint. Por padrão o valor é falso, e sugerimos que ele seja mantido assim nas primeiras implementações do uso do pagamento por QR Code.  # noqa: E501

        :param receive_callback: The receive_callback of this PaymentCardParams.
        :type receive_callback: bool
        """

        self._receive_callback = receive_callback
