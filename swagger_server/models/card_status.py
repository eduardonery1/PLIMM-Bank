# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CardStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, status_details: str=None):  # noqa: E501
        """CardStatus - a model defined in Swagger

        :param status: The status of this CardStatus.  # noqa: E501
        :type status: str
        :param status_details: The status_details of this CardStatus.  # noqa: E501
        :type status_details: str
        """
        self.swagger_types = {
            'status': str,
            'status_details': str
        }

        self.attribute_map = {
            'status': 'status',
            'status_details': 'statusDetails'
        }
        self._status = status
        self._status_details = status_details

    @classmethod
    def from_dict(cls, dikt) -> 'CardStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CardStatus of this CardStatus.  # noqa: E501
        :rtype: CardStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this CardStatus.

        Situação do cartão  # noqa: E501

        :return: The status of this CardStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this CardStatus.

        Situação do cartão  # noqa: E501

        :param status: The status of this CardStatus.
        :type status: str
        """
        allowed_values = ["blocked", "active", "cancelled", "issuing", "inTransit", "requested", "request_denied", "purged"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_details(self) -> str:
        """Gets the status_details of this CardStatus.

        Descrição de detalhes da situação.  # noqa: E501

        :return: The status_details of this CardStatus.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details: str):
        """Sets the status_details of this CardStatus.

        Descrição de detalhes da situação.  # noqa: E501

        :param status_details: The status_details of this CardStatus.
        :type status_details: str
        """

        self._status_details = status_details
