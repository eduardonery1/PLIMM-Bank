# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CET(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, monthly_interest: str=None, yearly_interest: str=None, iof: str=None, daily_iof: str=None, cet: str=None):  # noqa: E501
        """CET - a model defined in Swagger

        :param monthly_interest: The monthly_interest of this CET.  # noqa: E501
        :type monthly_interest: str
        :param yearly_interest: The yearly_interest of this CET.  # noqa: E501
        :type yearly_interest: str
        :param iof: The iof of this CET.  # noqa: E501
        :type iof: str
        :param daily_iof: The daily_iof of this CET.  # noqa: E501
        :type daily_iof: str
        :param cet: The cet of this CET.  # noqa: E501
        :type cet: str
        """
        self.swagger_types = {
            'monthly_interest': str,
            'yearly_interest': str,
            'iof': str,
            'daily_iof': str,
            'cet': str
        }

        self.attribute_map = {
            'monthly_interest': 'monthlyInterest',
            'yearly_interest': 'yearlyInterest',
            'iof': 'IOF',
            'daily_iof': 'DailyIOF',
            'cet': 'CET'
        }
        self._monthly_interest = monthly_interest
        self._yearly_interest = yearly_interest
        self._iof = iof
        self._daily_iof = daily_iof
        self._cet = cet

    @classmethod
    def from_dict(cls, dikt) -> 'CET':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CET of this CET.  # noqa: E501
        :rtype: CET
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monthly_interest(self) -> str:
        """Gets the monthly_interest of this CET.

        Juros mensais.  # noqa: E501

        :return: The monthly_interest of this CET.
        :rtype: str
        """
        return self._monthly_interest

    @monthly_interest.setter
    def monthly_interest(self, monthly_interest: str):
        """Sets the monthly_interest of this CET.

        Juros mensais.  # noqa: E501

        :param monthly_interest: The monthly_interest of this CET.
        :type monthly_interest: str
        """
        if monthly_interest is None:
            raise ValueError("Invalid value for `monthly_interest`, must not be `None`")  # noqa: E501

        self._monthly_interest = monthly_interest

    @property
    def yearly_interest(self) -> str:
        """Gets the yearly_interest of this CET.

        Juros anuais.  # noqa: E501

        :return: The yearly_interest of this CET.
        :rtype: str
        """
        return self._yearly_interest

    @yearly_interest.setter
    def yearly_interest(self, yearly_interest: str):
        """Sets the yearly_interest of this CET.

        Juros anuais.  # noqa: E501

        :param yearly_interest: The yearly_interest of this CET.
        :type yearly_interest: str
        """
        if yearly_interest is None:
            raise ValueError("Invalid value for `yearly_interest`, must not be `None`")  # noqa: E501

        self._yearly_interest = yearly_interest

    @property
    def iof(self) -> str:
        """Gets the iof of this CET.

        IOF.  # noqa: E501

        :return: The iof of this CET.
        :rtype: str
        """
        return self._iof

    @iof.setter
    def iof(self, iof: str):
        """Sets the iof of this CET.

        IOF.  # noqa: E501

        :param iof: The iof of this CET.
        :type iof: str
        """
        if iof is None:
            raise ValueError("Invalid value for `iof`, must not be `None`")  # noqa: E501

        self._iof = iof

    @property
    def daily_iof(self) -> str:
        """Gets the daily_iof of this CET.

        IOF diário.  # noqa: E501

        :return: The daily_iof of this CET.
        :rtype: str
        """
        return self._daily_iof

    @daily_iof.setter
    def daily_iof(self, daily_iof: str):
        """Sets the daily_iof of this CET.

        IOF diário.  # noqa: E501

        :param daily_iof: The daily_iof of this CET.
        :type daily_iof: str
        """

        self._daily_iof = daily_iof

    @property
    def cet(self) -> str:
        """Gets the cet of this CET.

        Custo Efetivo Total, ao ano.  # noqa: E501

        :return: The cet of this CET.
        :rtype: str
        """
        return self._cet

    @cet.setter
    def cet(self, cet: str):
        """Sets the cet of this CET.

        Custo Efetivo Total, ao ano.  # noqa: E501

        :param cet: The cet of this CET.
        :type cet: str
        """
        if cet is None:
            raise ValueError("Invalid value for `cet`, must not be `None`")  # noqa: E501

        self._cet = cet
