# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server.models.transaction_type import TransactionType  # noqa: F401,E501
from swagger_server import util


class NewTransactionRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_transaction_id: str=None, transaction_type: TransactionType=None, source_audit: SourceAudit=None, amount: AllOfNewTransactionRequestAmount=None, reason: str=None):  # noqa: E501
        """NewTransactionRequest - a model defined in Swagger

        :param issuer_transaction_id: The issuer_transaction_id of this NewTransactionRequest.  # noqa: E501
        :type issuer_transaction_id: str
        :param transaction_type: The transaction_type of this NewTransactionRequest.  # noqa: E501
        :type transaction_type: TransactionType
        :param source_audit: The source_audit of this NewTransactionRequest.  # noqa: E501
        :type source_audit: SourceAudit
        :param amount: The amount of this NewTransactionRequest.  # noqa: E501
        :type amount: AllOfNewTransactionRequestAmount
        :param reason: The reason of this NewTransactionRequest.  # noqa: E501
        :type reason: str
        """
        self.swagger_types = {
            'issuer_transaction_id': str,
            'transaction_type': TransactionType,
            'source_audit': SourceAudit,
            'amount': AllOfNewTransactionRequestAmount,
            'reason': str
        }

        self.attribute_map = {
            'issuer_transaction_id': 'issuerTransactionId',
            'transaction_type': 'transactionType',
            'source_audit': 'sourceAudit',
            'amount': 'amount',
            'reason': 'reason'
        }
        self._issuer_transaction_id = issuer_transaction_id
        self._transaction_type = transaction_type
        self._source_audit = source_audit
        self._amount = amount
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt) -> 'NewTransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewTransactionRequest of this NewTransactionRequest.  # noqa: E501
        :rtype: NewTransactionRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_transaction_id(self) -> str:
        """Gets the issuer_transaction_id of this NewTransactionRequest.

        Identificador único do transação. Gerado pelo emissor.  # noqa: E501

        :return: The issuer_transaction_id of this NewTransactionRequest.
        :rtype: str
        """
        return self._issuer_transaction_id

    @issuer_transaction_id.setter
    def issuer_transaction_id(self, issuer_transaction_id: str):
        """Sets the issuer_transaction_id of this NewTransactionRequest.

        Identificador único do transação. Gerado pelo emissor.  # noqa: E501

        :param issuer_transaction_id: The issuer_transaction_id of this NewTransactionRequest.
        :type issuer_transaction_id: str
        """

        self._issuer_transaction_id = issuer_transaction_id

    @property
    def transaction_type(self) -> TransactionType:
        """Gets the transaction_type of this NewTransactionRequest.


        :return: The transaction_type of this NewTransactionRequest.
        :rtype: TransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type: TransactionType):
        """Sets the transaction_type of this NewTransactionRequest.


        :param transaction_type: The transaction_type of this NewTransactionRequest.
        :type transaction_type: TransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this NewTransactionRequest.


        :return: The source_audit of this NewTransactionRequest.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this NewTransactionRequest.


        :param source_audit: The source_audit of this NewTransactionRequest.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit

    @property
    def amount(self) -> AllOfNewTransactionRequestAmount:
        """Gets the amount of this NewTransactionRequest.

        Valor do crédito ou débito a ser adicionado na conta.  # noqa: E501

        :return: The amount of this NewTransactionRequest.
        :rtype: AllOfNewTransactionRequestAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount: AllOfNewTransactionRequestAmount):
        """Sets the amount of this NewTransactionRequest.

        Valor do crédito ou débito a ser adicionado na conta.  # noqa: E501

        :param amount: The amount of this NewTransactionRequest.
        :type amount: AllOfNewTransactionRequestAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def reason(self) -> str:
        """Gets the reason of this NewTransactionRequest.

        Descrição do motivo ou da situação da transação.  # noqa: E501

        :return: The reason of this NewTransactionRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this NewTransactionRequest.

        Descrição do motivo ou da situação da transação.  # noqa: E501

        :param reason: The reason of this NewTransactionRequest.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason
