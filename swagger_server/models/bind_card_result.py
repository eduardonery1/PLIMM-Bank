# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account import Account  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class BindCardResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, result_data: AllOfBindCardResultResultData=None, account: Account=None):  # noqa: E501
        """BindCardResult - a model defined in Swagger

        :param result_data: The result_data of this BindCardResult.  # noqa: E501
        :type result_data: AllOfBindCardResultResultData
        :param account: The account of this BindCardResult.  # noqa: E501
        :type account: Account
        """
        self.swagger_types = {
            'result_data': AllOfBindCardResultResultData,
            'account': Account
        }

        self.attribute_map = {
            'result_data': 'resultData',
            'account': 'account'
        }
        self._result_data = result_data
        self._account = account

    @classmethod
    def from_dict(cls, dikt) -> 'BindCardResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BindCardResult of this BindCardResult.  # noqa: E501
        :rtype: BindCardResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result_data(self) -> AllOfBindCardResultResultData:
        """Gets the result_data of this BindCardResult.


        :return: The result_data of this BindCardResult.
        :rtype: AllOfBindCardResultResultData
        """
        return self._result_data

    @result_data.setter
    def result_data(self, result_data: AllOfBindCardResultResultData):
        """Sets the result_data of this BindCardResult.


        :param result_data: The result_data of this BindCardResult.
        :type result_data: AllOfBindCardResultResultData
        """
        if result_data is None:
            raise ValueError("Invalid value for `result_data`, must not be `None`")  # noqa: E501

        self._result_data = result_data

    @property
    def account(self) -> Account:
        """Gets the account of this BindCardResult.


        :return: The account of this BindCardResult.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account: Account):
        """Sets the account of this BindCardResult.


        :param account: The account of this BindCardResult.
        :type account: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account
