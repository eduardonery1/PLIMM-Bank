# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server.models.statement_entry import StatementEntry  # noqa: F401,E501
from swagger_server import util


class Statement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_id: str=None, statement_status: str=None, payment_due_actual: str=None, close_date: str=None, payments_and_credits: AllOfStatementPaymentsAndCredits=None, purchases_and_debits: AllOfStatementPurchasesAndDebits=None, balance: AllOfStatementBalance=None, minimum_payment_due: AllOfStatementMinimumPaymentDue=None, transactions_list: List[StatementEntry]=None, charges_in_next_statement_for_minimum_payment: AllOfStatementChargesInNextStatementForMinimumPayment=None, cet: AllOfStatementCet=None, query_date: datetime=None, source_audit: SourceAudit=None):  # noqa: E501
        """Statement - a model defined in Swagger

        :param account_id: The account_id of this Statement.  # noqa: E501
        :type account_id: str
        :param statement_status: The statement_status of this Statement.  # noqa: E501
        :type statement_status: str
        :param payment_due_actual: The payment_due_actual of this Statement.  # noqa: E501
        :type payment_due_actual: str
        :param close_date: The close_date of this Statement.  # noqa: E501
        :type close_date: str
        :param payments_and_credits: The payments_and_credits of this Statement.  # noqa: E501
        :type payments_and_credits: AllOfStatementPaymentsAndCredits
        :param purchases_and_debits: The purchases_and_debits of this Statement.  # noqa: E501
        :type purchases_and_debits: AllOfStatementPurchasesAndDebits
        :param balance: The balance of this Statement.  # noqa: E501
        :type balance: AllOfStatementBalance
        :param minimum_payment_due: The minimum_payment_due of this Statement.  # noqa: E501
        :type minimum_payment_due: AllOfStatementMinimumPaymentDue
        :param transactions_list: The transactions_list of this Statement.  # noqa: E501
        :type transactions_list: List[StatementEntry]
        :param charges_in_next_statement_for_minimum_payment: The charges_in_next_statement_for_minimum_payment of this Statement.  # noqa: E501
        :type charges_in_next_statement_for_minimum_payment: AllOfStatementChargesInNextStatementForMinimumPayment
        :param cet: The cet of this Statement.  # noqa: E501
        :type cet: AllOfStatementCet
        :param query_date: The query_date of this Statement.  # noqa: E501
        :type query_date: datetime
        :param source_audit: The source_audit of this Statement.  # noqa: E501
        :type source_audit: SourceAudit
        """
        self.swagger_types = {
            'account_id': str,
            'statement_status': str,
            'payment_due_actual': str,
            'close_date': str,
            'payments_and_credits': AllOfStatementPaymentsAndCredits,
            'purchases_and_debits': AllOfStatementPurchasesAndDebits,
            'balance': AllOfStatementBalance,
            'minimum_payment_due': AllOfStatementMinimumPaymentDue,
            'transactions_list': List[StatementEntry],
            'charges_in_next_statement_for_minimum_payment': AllOfStatementChargesInNextStatementForMinimumPayment,
            'cet': AllOfStatementCet,
            'query_date': datetime,
            'source_audit': SourceAudit
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'statement_status': 'statementStatus',
            'payment_due_actual': 'paymentDueActual',
            'close_date': 'closeDate',
            'payments_and_credits': 'paymentsAndCredits',
            'purchases_and_debits': 'purchasesAndDebits',
            'balance': 'balance',
            'minimum_payment_due': 'minimumPaymentDue',
            'transactions_list': 'transactionsList',
            'charges_in_next_statement_for_minimum_payment': 'chargesInNextStatementForMinimumPayment',
            'cet': 'CET',
            'query_date': 'query_date',
            'source_audit': 'sourceAudit'
        }
        self._account_id = account_id
        self._statement_status = statement_status
        self._payment_due_actual = payment_due_actual
        self._close_date = close_date
        self._payments_and_credits = payments_and_credits
        self._purchases_and_debits = purchases_and_debits
        self._balance = balance
        self._minimum_payment_due = minimum_payment_due
        self._transactions_list = transactions_list
        self._charges_in_next_statement_for_minimum_payment = charges_in_next_statement_for_minimum_payment
        self._cet = cet
        self._query_date = query_date
        self._source_audit = source_audit

    @classmethod
    def from_dict(cls, dikt) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Statement of this Statement.  # noqa: E501
        :rtype: Statement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Statement.

        Identificador único da conta.  # noqa: E501

        :return: The account_id of this Statement.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Statement.

        Identificador único da conta.  # noqa: E501

        :param account_id: The account_id of this Statement.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def statement_status(self) -> str:
        """Gets the statement_status of this Statement.

        Status da fatura. -- open - Fatura aberta atual. -- closed - Última fatura fechada.  # noqa: E501

        :return: The statement_status of this Statement.
        :rtype: str
        """
        return self._statement_status

    @statement_status.setter
    def statement_status(self, statement_status: str):
        """Sets the statement_status of this Statement.

        Status da fatura. -- open - Fatura aberta atual. -- closed - Última fatura fechada.  # noqa: E501

        :param statement_status: The statement_status of this Statement.
        :type statement_status: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if statement_status not in allowed_values:
            raise ValueError(
                "Invalid value for `statement_status` ({0}), must be one of {1}"
                .format(statement_status, allowed_values)
            )

        self._statement_status = statement_status

    @property
    def payment_due_actual(self) -> str:
        """Gets the payment_due_actual of this Statement.

        Data de vencimento da fatura, levando em conta fins de semana e feriados.  # noqa: E501

        :return: The payment_due_actual of this Statement.
        :rtype: str
        """
        return self._payment_due_actual

    @payment_due_actual.setter
    def payment_due_actual(self, payment_due_actual: str):
        """Sets the payment_due_actual of this Statement.

        Data de vencimento da fatura, levando em conta fins de semana e feriados.  # noqa: E501

        :param payment_due_actual: The payment_due_actual of this Statement.
        :type payment_due_actual: str
        """
        if payment_due_actual is None:
            raise ValueError("Invalid value for `payment_due_actual`, must not be `None`")  # noqa: E501

        self._payment_due_actual = payment_due_actual

    @property
    def close_date(self) -> str:
        """Gets the close_date of this Statement.

        Data de fechamento da fatura.  # noqa: E501

        :return: The close_date of this Statement.
        :rtype: str
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date: str):
        """Sets the close_date of this Statement.

        Data de fechamento da fatura.  # noqa: E501

        :param close_date: The close_date of this Statement.
        :type close_date: str
        """

        self._close_date = close_date

    @property
    def payments_and_credits(self) -> AllOfStatementPaymentsAndCredits:
        """Gets the payments_and_credits of this Statement.

        Pagamentos e créditos nessa fatura  # noqa: E501

        :return: The payments_and_credits of this Statement.
        :rtype: AllOfStatementPaymentsAndCredits
        """
        return self._payments_and_credits

    @payments_and_credits.setter
    def payments_and_credits(self, payments_and_credits: AllOfStatementPaymentsAndCredits):
        """Sets the payments_and_credits of this Statement.

        Pagamentos e créditos nessa fatura  # noqa: E501

        :param payments_and_credits: The payments_and_credits of this Statement.
        :type payments_and_credits: AllOfStatementPaymentsAndCredits
        """
        if payments_and_credits is None:
            raise ValueError("Invalid value for `payments_and_credits`, must not be `None`")  # noqa: E501

        self._payments_and_credits = payments_and_credits

    @property
    def purchases_and_debits(self) -> AllOfStatementPurchasesAndDebits:
        """Gets the purchases_and_debits of this Statement.

        Compras e débitos nessa fatura  # noqa: E501

        :return: The purchases_and_debits of this Statement.
        :rtype: AllOfStatementPurchasesAndDebits
        """
        return self._purchases_and_debits

    @purchases_and_debits.setter
    def purchases_and_debits(self, purchases_and_debits: AllOfStatementPurchasesAndDebits):
        """Sets the purchases_and_debits of this Statement.

        Compras e débitos nessa fatura  # noqa: E501

        :param purchases_and_debits: The purchases_and_debits of this Statement.
        :type purchases_and_debits: AllOfStatementPurchasesAndDebits
        """
        if purchases_and_debits is None:
            raise ValueError("Invalid value for `purchases_and_debits`, must not be `None`")  # noqa: E501

        self._purchases_and_debits = purchases_and_debits

    @property
    def balance(self) -> AllOfStatementBalance:
        """Gets the balance of this Statement.

        Saldo total da fatura  # noqa: E501

        :return: The balance of this Statement.
        :rtype: AllOfStatementBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance: AllOfStatementBalance):
        """Sets the balance of this Statement.

        Saldo total da fatura  # noqa: E501

        :param balance: The balance of this Statement.
        :type balance: AllOfStatementBalance
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def minimum_payment_due(self) -> AllOfStatementMinimumPaymentDue:
        """Gets the minimum_payment_due of this Statement.

        Valor mínimo a ser pago para está fatura até o vencimento.  # noqa: E501

        :return: The minimum_payment_due of this Statement.
        :rtype: AllOfStatementMinimumPaymentDue
        """
        return self._minimum_payment_due

    @minimum_payment_due.setter
    def minimum_payment_due(self, minimum_payment_due: AllOfStatementMinimumPaymentDue):
        """Sets the minimum_payment_due of this Statement.

        Valor mínimo a ser pago para está fatura até o vencimento.  # noqa: E501

        :param minimum_payment_due: The minimum_payment_due of this Statement.
        :type minimum_payment_due: AllOfStatementMinimumPaymentDue
        """

        self._minimum_payment_due = minimum_payment_due

    @property
    def transactions_list(self) -> List[StatementEntry]:
        """Gets the transactions_list of this Statement.

        Lista de lançamentos nessa fatura  # noqa: E501

        :return: The transactions_list of this Statement.
        :rtype: List[StatementEntry]
        """
        return self._transactions_list

    @transactions_list.setter
    def transactions_list(self, transactions_list: List[StatementEntry]):
        """Sets the transactions_list of this Statement.

        Lista de lançamentos nessa fatura  # noqa: E501

        :param transactions_list: The transactions_list of this Statement.
        :type transactions_list: List[StatementEntry]
        """
        if transactions_list is None:
            raise ValueError("Invalid value for `transactions_list`, must not be `None`")  # noqa: E501

        self._transactions_list = transactions_list

    @property
    def charges_in_next_statement_for_minimum_payment(self) -> AllOfStatementChargesInNextStatementForMinimumPayment:
        """Gets the charges_in_next_statement_for_minimum_payment of this Statement.

        No caso de ser pago apenas o valor mínimo até a data de vencimento valor a ser pago na próxima fatura (juros mais impostos).  # noqa: E501

        :return: The charges_in_next_statement_for_minimum_payment of this Statement.
        :rtype: AllOfStatementChargesInNextStatementForMinimumPayment
        """
        return self._charges_in_next_statement_for_minimum_payment

    @charges_in_next_statement_for_minimum_payment.setter
    def charges_in_next_statement_for_minimum_payment(self, charges_in_next_statement_for_minimum_payment: AllOfStatementChargesInNextStatementForMinimumPayment):
        """Sets the charges_in_next_statement_for_minimum_payment of this Statement.

        No caso de ser pago apenas o valor mínimo até a data de vencimento valor a ser pago na próxima fatura (juros mais impostos).  # noqa: E501

        :param charges_in_next_statement_for_minimum_payment: The charges_in_next_statement_for_minimum_payment of this Statement.
        :type charges_in_next_statement_for_minimum_payment: AllOfStatementChargesInNextStatementForMinimumPayment
        """

        self._charges_in_next_statement_for_minimum_payment = charges_in_next_statement_for_minimum_payment

    @property
    def cet(self) -> AllOfStatementCet:
        """Gets the cet of this Statement.

        Custo Efetivo Total (CET), para o próximo período, das operações de crédito passíveis de contratação.  # noqa: E501

        :return: The cet of this Statement.
        :rtype: AllOfStatementCet
        """
        return self._cet

    @cet.setter
    def cet(self, cet: AllOfStatementCet):
        """Sets the cet of this Statement.

        Custo Efetivo Total (CET), para o próximo período, das operações de crédito passíveis de contratação.  # noqa: E501

        :param cet: The cet of this Statement.
        :type cet: AllOfStatementCet
        """

        self._cet = cet

    @property
    def query_date(self) -> datetime:
        """Gets the query_date of this Statement.

        Data de consulta.  # noqa: E501

        :return: The query_date of this Statement.
        :rtype: datetime
        """
        return self._query_date

    @query_date.setter
    def query_date(self, query_date: datetime):
        """Sets the query_date of this Statement.

        Data de consulta.  # noqa: E501

        :param query_date: The query_date of this Statement.
        :type query_date: datetime
        """

        self._query_date = query_date

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this Statement.


        :return: The source_audit of this Statement.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this Statement.


        :param source_audit: The source_audit of this Statement.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit
