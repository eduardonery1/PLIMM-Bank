# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DisputeDocument(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, document_name: str=None, document_description: str=None, document: str=None):  # noqa: E501
        """DisputeDocument - a model defined in Swagger

        :param document_name: The document_name of this DisputeDocument.  # noqa: E501
        :type document_name: str
        :param document_description: The document_description of this DisputeDocument.  # noqa: E501
        :type document_description: str
        :param document: The document of this DisputeDocument.  # noqa: E501
        :type document: str
        """
        self.swagger_types = {
            'document_name': str,
            'document_description': str,
            'document': str
        }

        self.attribute_map = {
            'document_name': 'documentName',
            'document_description': 'documentDescription',
            'document': 'document'
        }
        self._document_name = document_name
        self._document_description = document_description
        self._document = document

    @classmethod
    def from_dict(cls, dikt) -> 'DisputeDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DisputeDocument of this DisputeDocument.  # noqa: E501
        :rtype: DisputeDocument
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_name(self) -> str:
        """Gets the document_name of this DisputeDocument.

        Nome do documento auxiliar para a disputa.  # noqa: E501

        :return: The document_name of this DisputeDocument.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name: str):
        """Sets the document_name of this DisputeDocument.

        Nome do documento auxiliar para a disputa.  # noqa: E501

        :param document_name: The document_name of this DisputeDocument.
        :type document_name: str
        """
        if document_name is None:
            raise ValueError("Invalid value for `document_name`, must not be `None`")  # noqa: E501

        self._document_name = document_name

    @property
    def document_description(self) -> str:
        """Gets the document_description of this DisputeDocument.

        Descrição do documento.  # noqa: E501

        :return: The document_description of this DisputeDocument.
        :rtype: str
        """
        return self._document_description

    @document_description.setter
    def document_description(self, document_description: str):
        """Sets the document_description of this DisputeDocument.

        Descrição do documento.  # noqa: E501

        :param document_description: The document_description of this DisputeDocument.
        :type document_description: str
        """

        self._document_description = document_description

    @property
    def document(self) -> str:
        """Gets the document of this DisputeDocument.

        Documento codificado em base64.  # noqa: E501

        :return: The document of this DisputeDocument.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document: str):
        """Sets the document of this DisputeDocument.

        Documento codificado em base64.  # noqa: E501

        :param document: The document of this DisputeDocument.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document
