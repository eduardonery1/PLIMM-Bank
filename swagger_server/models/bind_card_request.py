# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BindCardRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_request_id: str=None, card_id: str=None, pan: str=None, cvv: str=None, date_exp: str=None):  # noqa: E501
        """BindCardRequest - a model defined in Swagger

        :param issuer_request_id: The issuer_request_id of this BindCardRequest.  # noqa: E501
        :type issuer_request_id: str
        :param card_id: The card_id of this BindCardRequest.  # noqa: E501
        :type card_id: str
        :param pan: The pan of this BindCardRequest.  # noqa: E501
        :type pan: str
        :param cvv: The cvv of this BindCardRequest.  # noqa: E501
        :type cvv: str
        :param date_exp: The date_exp of this BindCardRequest.  # noqa: E501
        :type date_exp: str
        """
        self.swagger_types = {
            'issuer_request_id': str,
            'card_id': str,
            'pan': str,
            'cvv': str,
            'date_exp': str
        }

        self.attribute_map = {
            'issuer_request_id': 'issuerRequestId',
            'card_id': 'cardId',
            'pan': 'pan',
            'cvv': 'cvv',
            'date_exp': 'dateExp'
        }
        self._issuer_request_id = issuer_request_id
        self._card_id = card_id
        self._pan = pan
        self._cvv = cvv
        self._date_exp = date_exp

    @classmethod
    def from_dict(cls, dikt) -> 'BindCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BindCardRequest of this BindCardRequest.  # noqa: E501
        :rtype: BindCardRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_request_id(self) -> str:
        """Gets the issuer_request_id of this BindCardRequest.

        Identificador único da requisição gerado pelo emissor. Esse identificador é ecoado na resposta. Nenhuma verificação dele é feita por parte da paySmart, o emissor é livre para escolher o valor que quiser.  # noqa: E501

        :return: The issuer_request_id of this BindCardRequest.
        :rtype: str
        """
        return self._issuer_request_id

    @issuer_request_id.setter
    def issuer_request_id(self, issuer_request_id: str):
        """Sets the issuer_request_id of this BindCardRequest.

        Identificador único da requisição gerado pelo emissor. Esse identificador é ecoado na resposta. Nenhuma verificação dele é feita por parte da paySmart, o emissor é livre para escolher o valor que quiser.  # noqa: E501

        :param issuer_request_id: The issuer_request_id of this BindCardRequest.
        :type issuer_request_id: str
        """

        self._issuer_request_id = issuer_request_id

    @property
    def card_id(self) -> str:
        """Gets the card_id of this BindCardRequest.

        Identificador do cartão que se deseja associar à conta.  # noqa: E501

        :return: The card_id of this BindCardRequest.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id: str):
        """Sets the card_id of this BindCardRequest.

        Identificador do cartão que se deseja associar à conta.  # noqa: E501

        :param card_id: The card_id of this BindCardRequest.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def pan(self) -> str:
        """Gets the pan of this BindCardRequest.

        Número do cartão.  # noqa: E501

        :return: The pan of this BindCardRequest.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan: str):
        """Sets the pan of this BindCardRequest.

        Número do cartão.  # noqa: E501

        :param pan: The pan of this BindCardRequest.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")  # noqa: E501

        self._pan = pan

    @property
    def cvv(self) -> str:
        """Gets the cvv of this BindCardRequest.

        Código de segurança do cartão.  # noqa: E501

        :return: The cvv of this BindCardRequest.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv: str):
        """Sets the cvv of this BindCardRequest.

        Código de segurança do cartão.  # noqa: E501

        :param cvv: The cvv of this BindCardRequest.
        :type cvv: str
        """
        if cvv is None:
            raise ValueError("Invalid value for `cvv`, must not be `None`")  # noqa: E501

        self._cvv = cvv

    @property
    def date_exp(self) -> str:
        """Gets the date_exp of this BindCardRequest.

        Data de expiração do cartão.  # noqa: E501

        :return: The date_exp of this BindCardRequest.
        :rtype: str
        """
        return self._date_exp

    @date_exp.setter
    def date_exp(self, date_exp: str):
        """Sets the date_exp of this BindCardRequest.

        Data de expiração do cartão.  # noqa: E501

        :param date_exp: The date_exp of this BindCardRequest.
        :type date_exp: str
        """
        if date_exp is None:
            raise ValueError("Invalid value for `date_exp`, must not be `None`")  # noqa: E501

        self._date_exp = date_exp
