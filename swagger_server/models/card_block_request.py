# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server import util


class CardBlockRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_card_block_id: str=None, block_code: int=None, reason: str=None, source_audit: SourceAudit=None):  # noqa: E501
        """CardBlockRequest - a model defined in Swagger

        :param issuer_card_block_id: The issuer_card_block_id of this CardBlockRequest.  # noqa: E501
        :type issuer_card_block_id: str
        :param block_code: The block_code of this CardBlockRequest.  # noqa: E501
        :type block_code: int
        :param reason: The reason of this CardBlockRequest.  # noqa: E501
        :type reason: str
        :param source_audit: The source_audit of this CardBlockRequest.  # noqa: E501
        :type source_audit: SourceAudit
        """
        self.swagger_types = {
            'issuer_card_block_id': str,
            'block_code': int,
            'reason': str,
            'source_audit': SourceAudit
        }

        self.attribute_map = {
            'issuer_card_block_id': 'issuerCardBlockId',
            'block_code': 'blockCode',
            'reason': 'reason',
            'source_audit': 'sourceAudit'
        }
        self._issuer_card_block_id = issuer_card_block_id
        self._block_code = block_code
        self._reason = reason
        self._source_audit = source_audit

    @classmethod
    def from_dict(cls, dikt) -> 'CardBlockRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CardBlockRequest of this CardBlockRequest.  # noqa: E501
        :rtype: CardBlockRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_card_block_id(self) -> str:
        """Gets the issuer_card_block_id of this CardBlockRequest.

        Identificador único da requisição de bloqueio. Gerado pelo emissor.  # noqa: E501

        :return: The issuer_card_block_id of this CardBlockRequest.
        :rtype: str
        """
        return self._issuer_card_block_id

    @issuer_card_block_id.setter
    def issuer_card_block_id(self, issuer_card_block_id: str):
        """Sets the issuer_card_block_id of this CardBlockRequest.

        Identificador único da requisição de bloqueio. Gerado pelo emissor.  # noqa: E501

        :param issuer_card_block_id: The issuer_card_block_id of this CardBlockRequest.
        :type issuer_card_block_id: str
        """

        self._issuer_card_block_id = issuer_card_block_id

    @property
    def block_code(self) -> int:
        """Gets the block_code of this CardBlockRequest.

        Código identificando o tipo de bloqueio.  # noqa: E501

        :return: The block_code of this CardBlockRequest.
        :rtype: int
        """
        return self._block_code

    @block_code.setter
    def block_code(self, block_code: int):
        """Sets the block_code of this CardBlockRequest.

        Código identificando o tipo de bloqueio.  # noqa: E501

        :param block_code: The block_code of this CardBlockRequest.
        :type block_code: int
        """
        if block_code is None:
            raise ValueError("Invalid value for `block_code`, must not be `None`")  # noqa: E501

        self._block_code = block_code

    @property
    def reason(self) -> str:
        """Gets the reason of this CardBlockRequest.

        Motivo do bloqueio.  # noqa: E501

        :return: The reason of this CardBlockRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this CardBlockRequest.

        Motivo do bloqueio.  # noqa: E501

        :param reason: The reason of this CardBlockRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this CardBlockRequest.


        :return: The source_audit of this CardBlockRequest.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this CardBlockRequest.


        :param source_audit: The source_audit of this CardBlockRequest.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit
