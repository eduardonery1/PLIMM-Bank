# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server import util


class AssociateAnonymousCardRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_request_id: str=None, pan: str=None, cvv: str=None, date_exp: str=None, cardholder: AllOfAssociateAnonymousCardRequestCardholder=None, source_audit: SourceAudit=None):  # noqa: E501
        """AssociateAnonymousCardRequest - a model defined in Swagger

        :param issuer_request_id: The issuer_request_id of this AssociateAnonymousCardRequest.  # noqa: E501
        :type issuer_request_id: str
        :param pan: The pan of this AssociateAnonymousCardRequest.  # noqa: E501
        :type pan: str
        :param cvv: The cvv of this AssociateAnonymousCardRequest.  # noqa: E501
        :type cvv: str
        :param date_exp: The date_exp of this AssociateAnonymousCardRequest.  # noqa: E501
        :type date_exp: str
        :param cardholder: The cardholder of this AssociateAnonymousCardRequest.  # noqa: E501
        :type cardholder: AllOfAssociateAnonymousCardRequestCardholder
        :param source_audit: The source_audit of this AssociateAnonymousCardRequest.  # noqa: E501
        :type source_audit: SourceAudit
        """
        self.swagger_types = {
            'issuer_request_id': str,
            'pan': str,
            'cvv': str,
            'date_exp': str,
            'cardholder': AllOfAssociateAnonymousCardRequestCardholder,
            'source_audit': SourceAudit
        }

        self.attribute_map = {
            'issuer_request_id': 'issuerRequestId',
            'pan': 'PAN',
            'cvv': 'CVV',
            'date_exp': 'dateExp',
            'cardholder': 'cardholder',
            'source_audit': 'sourceAudit'
        }
        self._issuer_request_id = issuer_request_id
        self._pan = pan
        self._cvv = cvv
        self._date_exp = date_exp
        self._cardholder = cardholder
        self._source_audit = source_audit

    @classmethod
    def from_dict(cls, dikt) -> 'AssociateAnonymousCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssociateAnonymousCardRequest of this AssociateAnonymousCardRequest.  # noqa: E501
        :rtype: AssociateAnonymousCardRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_request_id(self) -> str:
        """Gets the issuer_request_id of this AssociateAnonymousCardRequest.

        Identificador único da requisição gerado pelo emissor. Esse identificador é ecoado na resposta. Nenhuma verificação dele é feita por parte da paySmart, o emissor é livre para escolher o valor que quiser.  # noqa: E501

        :return: The issuer_request_id of this AssociateAnonymousCardRequest.
        :rtype: str
        """
        return self._issuer_request_id

    @issuer_request_id.setter
    def issuer_request_id(self, issuer_request_id: str):
        """Sets the issuer_request_id of this AssociateAnonymousCardRequest.

        Identificador único da requisição gerado pelo emissor. Esse identificador é ecoado na resposta. Nenhuma verificação dele é feita por parte da paySmart, o emissor é livre para escolher o valor que quiser.  # noqa: E501

        :param issuer_request_id: The issuer_request_id of this AssociateAnonymousCardRequest.
        :type issuer_request_id: str
        """

        self._issuer_request_id = issuer_request_id

    @property
    def pan(self) -> str:
        """Gets the pan of this AssociateAnonymousCardRequest.

        Número do cartão.  # noqa: E501

        :return: The pan of this AssociateAnonymousCardRequest.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan: str):
        """Sets the pan of this AssociateAnonymousCardRequest.

        Número do cartão.  # noqa: E501

        :param pan: The pan of this AssociateAnonymousCardRequest.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")  # noqa: E501

        self._pan = pan

    @property
    def cvv(self) -> str:
        """Gets the cvv of this AssociateAnonymousCardRequest.

        Código de segurança do cartão. Para validar que o usuário realmente está com o cartão.  # noqa: E501

        :return: The cvv of this AssociateAnonymousCardRequest.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv: str):
        """Sets the cvv of this AssociateAnonymousCardRequest.

        Código de segurança do cartão. Para validar que o usuário realmente está com o cartão.  # noqa: E501

        :param cvv: The cvv of this AssociateAnonymousCardRequest.
        :type cvv: str
        """
        if cvv is None:
            raise ValueError("Invalid value for `cvv`, must not be `None`")  # noqa: E501

        self._cvv = cvv

    @property
    def date_exp(self) -> str:
        """Gets the date_exp of this AssociateAnonymousCardRequest.

        Data de expiração do cartão. Para validar que o usuário realmente está com o cartão.  # noqa: E501

        :return: The date_exp of this AssociateAnonymousCardRequest.
        :rtype: str
        """
        return self._date_exp

    @date_exp.setter
    def date_exp(self, date_exp: str):
        """Sets the date_exp of this AssociateAnonymousCardRequest.

        Data de expiração do cartão. Para validar que o usuário realmente está com o cartão.  # noqa: E501

        :param date_exp: The date_exp of this AssociateAnonymousCardRequest.
        :type date_exp: str
        """
        if date_exp is None:
            raise ValueError("Invalid value for `date_exp`, must not be `None`")  # noqa: E501

        self._date_exp = date_exp

    @property
    def cardholder(self) -> AllOfAssociateAnonymousCardRequestCardholder:
        """Gets the cardholder of this AssociateAnonymousCardRequest.

        Informações relacionadas ao portador do cartão. Vão ser usadas para associar o cartão anônimo a uma pessoa.  # noqa: E501

        :return: The cardholder of this AssociateAnonymousCardRequest.
        :rtype: AllOfAssociateAnonymousCardRequestCardholder
        """
        return self._cardholder

    @cardholder.setter
    def cardholder(self, cardholder: AllOfAssociateAnonymousCardRequestCardholder):
        """Sets the cardholder of this AssociateAnonymousCardRequest.

        Informações relacionadas ao portador do cartão. Vão ser usadas para associar o cartão anônimo a uma pessoa.  # noqa: E501

        :param cardholder: The cardholder of this AssociateAnonymousCardRequest.
        :type cardholder: AllOfAssociateAnonymousCardRequestCardholder
        """
        if cardholder is None:
            raise ValueError("Invalid value for `cardholder`, must not be `None`")  # noqa: E501

        self._cardholder = cardholder

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this AssociateAnonymousCardRequest.


        :return: The source_audit of this AssociateAnonymousCardRequest.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this AssociateAnonymousCardRequest.


        :param source_audit: The source_audit of this AssociateAnonymousCardRequest.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit
