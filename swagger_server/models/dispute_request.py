# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server import util


class DisputeRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_dispute_id: str=None, account_id: str=None, transaction_id: str=None, dispute_code: str=None, dispute_text_message: str=None, partial: bool=None, amount_disputed: AllOfDisputeRequestAmountDisputed=None, will_add_documents: bool=None, source_audit: SourceAudit=None):  # noqa: E501
        """DisputeRequest - a model defined in Swagger

        :param issuer_dispute_id: The issuer_dispute_id of this DisputeRequest.  # noqa: E501
        :type issuer_dispute_id: str
        :param account_id: The account_id of this DisputeRequest.  # noqa: E501
        :type account_id: str
        :param transaction_id: The transaction_id of this DisputeRequest.  # noqa: E501
        :type transaction_id: str
        :param dispute_code: The dispute_code of this DisputeRequest.  # noqa: E501
        :type dispute_code: str
        :param dispute_text_message: The dispute_text_message of this DisputeRequest.  # noqa: E501
        :type dispute_text_message: str
        :param partial: The partial of this DisputeRequest.  # noqa: E501
        :type partial: bool
        :param amount_disputed: The amount_disputed of this DisputeRequest.  # noqa: E501
        :type amount_disputed: AllOfDisputeRequestAmountDisputed
        :param will_add_documents: The will_add_documents of this DisputeRequest.  # noqa: E501
        :type will_add_documents: bool
        :param source_audit: The source_audit of this DisputeRequest.  # noqa: E501
        :type source_audit: SourceAudit
        """
        self.swagger_types = {
            'issuer_dispute_id': str,
            'account_id': str,
            'transaction_id': str,
            'dispute_code': str,
            'dispute_text_message': str,
            'partial': bool,
            'amount_disputed': AllOfDisputeRequestAmountDisputed,
            'will_add_documents': bool,
            'source_audit': SourceAudit
        }

        self.attribute_map = {
            'issuer_dispute_id': 'issuerDisputeId',
            'account_id': 'accountId',
            'transaction_id': 'transactionId',
            'dispute_code': 'disputeCode',
            'dispute_text_message': 'disputeTextMessage',
            'partial': 'partial',
            'amount_disputed': 'amount_disputed',
            'will_add_documents': 'willAddDocuments',
            'source_audit': 'sourceAudit'
        }
        self._issuer_dispute_id = issuer_dispute_id
        self._account_id = account_id
        self._transaction_id = transaction_id
        self._dispute_code = dispute_code
        self._dispute_text_message = dispute_text_message
        self._partial = partial
        self._amount_disputed = amount_disputed
        self._will_add_documents = will_add_documents
        self._source_audit = source_audit

    @classmethod
    def from_dict(cls, dikt) -> 'DisputeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DisputeRequest of this DisputeRequest.  # noqa: E501
        :rtype: DisputeRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_dispute_id(self) -> str:
        """Gets the issuer_dispute_id of this DisputeRequest.

        Identificador único da disputa. Gerado pelo emissor.  # noqa: E501

        :return: The issuer_dispute_id of this DisputeRequest.
        :rtype: str
        """
        return self._issuer_dispute_id

    @issuer_dispute_id.setter
    def issuer_dispute_id(self, issuer_dispute_id: str):
        """Sets the issuer_dispute_id of this DisputeRequest.

        Identificador único da disputa. Gerado pelo emissor.  # noqa: E501

        :param issuer_dispute_id: The issuer_dispute_id of this DisputeRequest.
        :type issuer_dispute_id: str
        """

        self._issuer_dispute_id = issuer_dispute_id

    @property
    def account_id(self) -> str:
        """Gets the account_id of this DisputeRequest.

        Identificador único da conta atribuído pela paySmart.  # noqa: E501

        :return: The account_id of this DisputeRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this DisputeRequest.

        Identificador único da conta atribuído pela paySmart.  # noqa: E501

        :param account_id: The account_id of this DisputeRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this DisputeRequest.

        Identificador da transação em disputa.  # noqa: E501

        :return: The transaction_id of this DisputeRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this DisputeRequest.

        Identificador da transação em disputa.  # noqa: E501

        :param transaction_id: The transaction_id of this DisputeRequest.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def dispute_code(self) -> str:
        """Gets the dispute_code of this DisputeRequest.

        Código da disputa que indica o motivo de abertura.  # noqa: E501

        :return: The dispute_code of this DisputeRequest.
        :rtype: str
        """
        return self._dispute_code

    @dispute_code.setter
    def dispute_code(self, dispute_code: str):
        """Sets the dispute_code of this DisputeRequest.

        Código da disputa que indica o motivo de abertura.  # noqa: E501

        :param dispute_code: The dispute_code of this DisputeRequest.
        :type dispute_code: str
        """
        if dispute_code is None:
            raise ValueError("Invalid value for `dispute_code`, must not be `None`")  # noqa: E501

        self._dispute_code = dispute_code

    @property
    def dispute_text_message(self) -> str:
        """Gets the dispute_text_message of this DisputeRequest.

        Mensagem de texto justificando a disputa. Conteúdo esperado depende do código do motivo da disputa.  # noqa: E501

        :return: The dispute_text_message of this DisputeRequest.
        :rtype: str
        """
        return self._dispute_text_message

    @dispute_text_message.setter
    def dispute_text_message(self, dispute_text_message: str):
        """Sets the dispute_text_message of this DisputeRequest.

        Mensagem de texto justificando a disputa. Conteúdo esperado depende do código do motivo da disputa.  # noqa: E501

        :param dispute_text_message: The dispute_text_message of this DisputeRequest.
        :type dispute_text_message: str
        """
        if dispute_text_message is None:
            raise ValueError("Invalid value for `dispute_text_message`, must not be `None`")  # noqa: E501

        self._dispute_text_message = dispute_text_message

    @property
    def partial(self) -> bool:
        """Gets the partial of this DisputeRequest.

        Indica se está sendo disputada uma parte ou o valor total da transação. Se for verdadeiro é necessário informar amount_disputed.  # noqa: E501

        :return: The partial of this DisputeRequest.
        :rtype: bool
        """
        return self._partial

    @partial.setter
    def partial(self, partial: bool):
        """Sets the partial of this DisputeRequest.

        Indica se está sendo disputada uma parte ou o valor total da transação. Se for verdadeiro é necessário informar amount_disputed.  # noqa: E501

        :param partial: The partial of this DisputeRequest.
        :type partial: bool
        """

        self._partial = partial

    @property
    def amount_disputed(self) -> AllOfDisputeRequestAmountDisputed:
        """Gets the amount_disputed of this DisputeRequest.

        Valor sendo disputado. Só deve estar presente se a partial for true.  # noqa: E501

        :return: The amount_disputed of this DisputeRequest.
        :rtype: AllOfDisputeRequestAmountDisputed
        """
        return self._amount_disputed

    @amount_disputed.setter
    def amount_disputed(self, amount_disputed: AllOfDisputeRequestAmountDisputed):
        """Sets the amount_disputed of this DisputeRequest.

        Valor sendo disputado. Só deve estar presente se a partial for true.  # noqa: E501

        :param amount_disputed: The amount_disputed of this DisputeRequest.
        :type amount_disputed: AllOfDisputeRequestAmountDisputed
        """

        self._amount_disputed = amount_disputed

    @property
    def will_add_documents(self) -> bool:
        """Gets the will_add_documents of this DisputeRequest.

        Indica se documentos apoiando a disputa vão ser anexados no Portal ELO posteriormente. Campo opcional, por padrão vai ser falso.  # noqa: E501

        :return: The will_add_documents of this DisputeRequest.
        :rtype: bool
        """
        return self._will_add_documents

    @will_add_documents.setter
    def will_add_documents(self, will_add_documents: bool):
        """Sets the will_add_documents of this DisputeRequest.

        Indica se documentos apoiando a disputa vão ser anexados no Portal ELO posteriormente. Campo opcional, por padrão vai ser falso.  # noqa: E501

        :param will_add_documents: The will_add_documents of this DisputeRequest.
        :type will_add_documents: bool
        """

        self._will_add_documents = will_add_documents

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this DisputeRequest.


        :return: The source_audit of this DisputeRequest.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this DisputeRequest.


        :param source_audit: The source_audit of this DisputeRequest.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit
