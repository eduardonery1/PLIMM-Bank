# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.source_audit import SourceAudit  # noqa: F401,E501
from swagger_server import util


class DisputeResponseRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, issuer_dispute_response_id: str=None, accept: bool=None, dispute_response_text_message: str=None, source_audit: SourceAudit=None):  # noqa: E501
        """DisputeResponseRequest - a model defined in Swagger

        :param issuer_dispute_response_id: The issuer_dispute_response_id of this DisputeResponseRequest.  # noqa: E501
        :type issuer_dispute_response_id: str
        :param accept: The accept of this DisputeResponseRequest.  # noqa: E501
        :type accept: bool
        :param dispute_response_text_message: The dispute_response_text_message of this DisputeResponseRequest.  # noqa: E501
        :type dispute_response_text_message: str
        :param source_audit: The source_audit of this DisputeResponseRequest.  # noqa: E501
        :type source_audit: SourceAudit
        """
        self.swagger_types = {
            'issuer_dispute_response_id': str,
            'accept': bool,
            'dispute_response_text_message': str,
            'source_audit': SourceAudit
        }

        self.attribute_map = {
            'issuer_dispute_response_id': 'issuerDisputeResponseId',
            'accept': 'accept',
            'dispute_response_text_message': 'disputeResponseTextMessage',
            'source_audit': 'sourceAudit'
        }
        self._issuer_dispute_response_id = issuer_dispute_response_id
        self._accept = accept
        self._dispute_response_text_message = dispute_response_text_message
        self._source_audit = source_audit

    @classmethod
    def from_dict(cls, dikt) -> 'DisputeResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DisputeResponseRequest of this DisputeResponseRequest.  # noqa: E501
        :rtype: DisputeResponseRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer_dispute_response_id(self) -> str:
        """Gets the issuer_dispute_response_id of this DisputeResponseRequest.

        Identificador único da resposta disputa. Gerado pelo emissor.  # noqa: E501

        :return: The issuer_dispute_response_id of this DisputeResponseRequest.
        :rtype: str
        """
        return self._issuer_dispute_response_id

    @issuer_dispute_response_id.setter
    def issuer_dispute_response_id(self, issuer_dispute_response_id: str):
        """Sets the issuer_dispute_response_id of this DisputeResponseRequest.

        Identificador único da resposta disputa. Gerado pelo emissor.  # noqa: E501

        :param issuer_dispute_response_id: The issuer_dispute_response_id of this DisputeResponseRequest.
        :type issuer_dispute_response_id: str
        """

        self._issuer_dispute_response_id = issuer_dispute_response_id

    @property
    def accept(self) -> bool:
        """Gets the accept of this DisputeResponseRequest.

        Identifica a resposta do credenciador/bandeira deve ser aceita. Se não for aceita o processo de disputa vai para a próxima etapa.  # noqa: E501

        :return: The accept of this DisputeResponseRequest.
        :rtype: bool
        """
        return self._accept

    @accept.setter
    def accept(self, accept: bool):
        """Sets the accept of this DisputeResponseRequest.

        Identifica a resposta do credenciador/bandeira deve ser aceita. Se não for aceita o processo de disputa vai para a próxima etapa.  # noqa: E501

        :param accept: The accept of this DisputeResponseRequest.
        :type accept: bool
        """
        if accept is None:
            raise ValueError("Invalid value for `accept`, must not be `None`")  # noqa: E501

        self._accept = accept

    @property
    def dispute_response_text_message(self) -> str:
        """Gets the dispute_response_text_message of this DisputeResponseRequest.

        Mensagem de texto justificando o motivo da continuação da disputa. Só precisa estar presente se accept for falso.  # noqa: E501

        :return: The dispute_response_text_message of this DisputeResponseRequest.
        :rtype: str
        """
        return self._dispute_response_text_message

    @dispute_response_text_message.setter
    def dispute_response_text_message(self, dispute_response_text_message: str):
        """Sets the dispute_response_text_message of this DisputeResponseRequest.

        Mensagem de texto justificando o motivo da continuação da disputa. Só precisa estar presente se accept for falso.  # noqa: E501

        :param dispute_response_text_message: The dispute_response_text_message of this DisputeResponseRequest.
        :type dispute_response_text_message: str
        """
        if dispute_response_text_message is None:
            raise ValueError("Invalid value for `dispute_response_text_message`, must not be `None`")  # noqa: E501

        self._dispute_response_text_message = dispute_response_text_message

    @property
    def source_audit(self) -> SourceAudit:
        """Gets the source_audit of this DisputeResponseRequest.


        :return: The source_audit of this DisputeResponseRequest.
        :rtype: SourceAudit
        """
        return self._source_audit

    @source_audit.setter
    def source_audit(self, source_audit: SourceAudit):
        """Sets the source_audit of this DisputeResponseRequest.


        :param source_audit: The source_audit of this DisputeResponseRequest.
        :type source_audit: SourceAudit
        """

        self._source_audit = source_audit
