# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PersonalIdentityDocumentInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, identity_document_number: str=None, state: str=None, issued_by: str=None):  # noqa: E501
        """PersonalIdentityDocumentInfo - a model defined in Swagger

        :param identity_document_number: The identity_document_number of this PersonalIdentityDocumentInfo.  # noqa: E501
        :type identity_document_number: str
        :param state: The state of this PersonalIdentityDocumentInfo.  # noqa: E501
        :type state: str
        :param issued_by: The issued_by of this PersonalIdentityDocumentInfo.  # noqa: E501
        :type issued_by: str
        """
        self.swagger_types = {
            'identity_document_number': str,
            'state': str,
            'issued_by': str
        }

        self.attribute_map = {
            'identity_document_number': 'identityDocumentNumber',
            'state': 'state',
            'issued_by': 'issuedBy'
        }
        self._identity_document_number = identity_document_number
        self._state = state
        self._issued_by = issued_by

    @classmethod
    def from_dict(cls, dikt) -> 'PersonalIdentityDocumentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersonalIdentityDocumentInfo of this PersonalIdentityDocumentInfo.  # noqa: E501
        :rtype: PersonalIdentityDocumentInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_document_number(self) -> str:
        """Gets the identity_document_number of this PersonalIdentityDocumentInfo.

        No Brasil, usar o RG.  # noqa: E501

        :return: The identity_document_number of this PersonalIdentityDocumentInfo.
        :rtype: str
        """
        return self._identity_document_number

    @identity_document_number.setter
    def identity_document_number(self, identity_document_number: str):
        """Sets the identity_document_number of this PersonalIdentityDocumentInfo.

        No Brasil, usar o RG.  # noqa: E501

        :param identity_document_number: The identity_document_number of this PersonalIdentityDocumentInfo.
        :type identity_document_number: str
        """
        if identity_document_number is None:
            raise ValueError("Invalid value for `identity_document_number`, must not be `None`")  # noqa: E501

        self._identity_document_number = identity_document_number

    @property
    def state(self) -> str:
        """Gets the state of this PersonalIdentityDocumentInfo.

        Estado.  # noqa: E501

        :return: The state of this PersonalIdentityDocumentInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this PersonalIdentityDocumentInfo.

        Estado.  # noqa: E501

        :param state: The state of this PersonalIdentityDocumentInfo.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def issued_by(self) -> str:
        """Gets the issued_by of this PersonalIdentityDocumentInfo.

        Orgão emissor.  # noqa: E501

        :return: The issued_by of this PersonalIdentityDocumentInfo.
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by: str):
        """Sets the issued_by of this PersonalIdentityDocumentInfo.

        Orgão emissor.  # noqa: E501

        :param issued_by: The issued_by of this PersonalIdentityDocumentInfo.
        :type issued_by: str
        """
        if issued_by is None:
            raise ValueError("Invalid value for `issued_by`, must not be `None`")  # noqa: E501

        self._issued_by = issued_by
