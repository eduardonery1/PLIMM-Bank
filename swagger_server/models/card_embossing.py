# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CardEmbossing(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, embossing_name: str=None):  # noqa: E501
        """CardEmbossing - a model defined in Swagger

        :param embossing_name: The embossing_name of this CardEmbossing.  # noqa: E501
        :type embossing_name: str
        """
        self.swagger_types = {
            'embossing_name': str
        }

        self.attribute_map = {
            'embossing_name': 'embossingName'
        }
        self._embossing_name = embossing_name

    @classmethod
    def from_dict(cls, dikt) -> 'CardEmbossing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CardEmbossing of this CardEmbossing.  # noqa: E501
        :rtype: CardEmbossing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embossing_name(self) -> str:
        """Gets the embossing_name of this CardEmbossing.

        Nome do portador conforme gravado na personalização do cartão.  # noqa: E501

        :return: The embossing_name of this CardEmbossing.
        :rtype: str
        """
        return self._embossing_name

    @embossing_name.setter
    def embossing_name(self, embossing_name: str):
        """Sets the embossing_name of this CardEmbossing.

        Nome do portador conforme gravado na personalização do cartão.  # noqa: E501

        :param embossing_name: The embossing_name of this CardEmbossing.
        :type embossing_name: str
        """
        if embossing_name is None:
            raise ValueError("Invalid value for `embossing_name`, must not be `None`")  # noqa: E501

        self._embossing_name = embossing_name
