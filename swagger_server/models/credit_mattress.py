# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.debit_or_credit_amount import DebitOrCreditAmount  # noqa: F401,E501
from swagger_server import util


class CreditMattress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, transaction_id: str=None, credit_received_date_time: datetime=None, credit_date: date=None, credit_time: str=None, amount: DebitOrCreditAmount=None, status: str=None, cancellation: bool=None):  # noqa: E501
        """CreditMattress - a model defined in Swagger

        :param transaction_id: The transaction_id of this CreditMattress.  # noqa: E501
        :type transaction_id: str
        :param credit_received_date_time: The credit_received_date_time of this CreditMattress.  # noqa: E501
        :type credit_received_date_time: datetime
        :param credit_date: The credit_date of this CreditMattress.  # noqa: E501
        :type credit_date: date
        :param credit_time: The credit_time of this CreditMattress.  # noqa: E501
        :type credit_time: str
        :param amount: The amount of this CreditMattress.  # noqa: E501
        :type amount: DebitOrCreditAmount
        :param status: The status of this CreditMattress.  # noqa: E501
        :type status: str
        :param cancellation: The cancellation of this CreditMattress.  # noqa: E501
        :type cancellation: bool
        """
        self.swagger_types = {
            'transaction_id': str,
            'credit_received_date_time': datetime,
            'credit_date': date,
            'credit_time': str,
            'amount': DebitOrCreditAmount,
            'status': str,
            'cancellation': bool
        }

        self.attribute_map = {
            'transaction_id': 'transactionId',
            'credit_received_date_time': 'creditReceivedDateTime',
            'credit_date': 'creditDate',
            'credit_time': 'creditTime',
            'amount': 'amount',
            'status': 'status',
            'cancellation': 'cancellation'
        }
        self._transaction_id = transaction_id
        self._credit_received_date_time = credit_received_date_time
        self._credit_date = credit_date
        self._credit_time = credit_time
        self._amount = amount
        self._status = status
        self._cancellation = cancellation

    @classmethod
    def from_dict(cls, dikt) -> 'CreditMattress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreditMattress of this CreditMattress.  # noqa: E501
        :rtype: CreditMattress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this CreditMattress.

        Identificador da transação atribuído pela paySmart.  # noqa: E501

        :return: The transaction_id of this CreditMattress.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this CreditMattress.

        Identificador da transação atribuído pela paySmart.  # noqa: E501

        :param transaction_id: The transaction_id of this CreditMattress.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def credit_received_date_time(self) -> datetime:
        """Gets the credit_received_date_time of this CreditMattress.

        Data e hora do recebimento da transação no serviço, no formato definido pela RFC 3339, seção 5.6.  # noqa: E501

        :return: The credit_received_date_time of this CreditMattress.
        :rtype: datetime
        """
        return self._credit_received_date_time

    @credit_received_date_time.setter
    def credit_received_date_time(self, credit_received_date_time: datetime):
        """Sets the credit_received_date_time of this CreditMattress.

        Data e hora do recebimento da transação no serviço, no formato definido pela RFC 3339, seção 5.6.  # noqa: E501

        :param credit_received_date_time: The credit_received_date_time of this CreditMattress.
        :type credit_received_date_time: datetime
        """
        if credit_received_date_time is None:
            raise ValueError("Invalid value for `credit_received_date_time`, must not be `None`")  # noqa: E501

        self._credit_received_date_time = credit_received_date_time

    @property
    def credit_date(self) -> date:
        """Gets the credit_date of this CreditMattress.

        Data da transação no formato definido pela RFC 3339, seção 5.6.  # noqa: E501

        :return: The credit_date of this CreditMattress.
        :rtype: date
        """
        return self._credit_date

    @credit_date.setter
    def credit_date(self, credit_date: date):
        """Sets the credit_date of this CreditMattress.

        Data da transação no formato definido pela RFC 3339, seção 5.6.  # noqa: E501

        :param credit_date: The credit_date of this CreditMattress.
        :type credit_date: date
        """

        self._credit_date = credit_date

    @property
    def credit_time(self) -> str:
        """Gets the credit_time of this CreditMattress.

        Hora da transação, sem a data  # noqa: E501

        :return: The credit_time of this CreditMattress.
        :rtype: str
        """
        return self._credit_time

    @credit_time.setter
    def credit_time(self, credit_time: str):
        """Sets the credit_time of this CreditMattress.

        Hora da transação, sem a data  # noqa: E501

        :param credit_time: The credit_time of this CreditMattress.
        :type credit_time: str
        """

        self._credit_time = credit_time

    @property
    def amount(self) -> DebitOrCreditAmount:
        """Gets the amount of this CreditMattress.


        :return: The amount of this CreditMattress.
        :rtype: DebitOrCreditAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount: DebitOrCreditAmount):
        """Sets the amount of this CreditMattress.


        :param amount: The amount of this CreditMattress.
        :type amount: DebitOrCreditAmount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def status(self) -> str:
        """Gets the status of this CreditMattress.

        Status do aporte.  # noqa: E501

        :return: The status of this CreditMattress.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this CreditMattress.

        Status do aporte.  # noqa: E501

        :param status: The status of this CreditMattress.
        :type status: str
        """
        allowed_values = ["confirmed", "canceled", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def cancellation(self) -> bool:
        """Gets the cancellation of this CreditMattress.

        Indica se esse aporte é um cancelamento de outro aporte anterior.  # noqa: E501

        :return: The cancellation of this CreditMattress.
        :rtype: bool
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation: bool):
        """Sets the cancellation of this CreditMattress.

        Indica se esse aporte é um cancelamento de outro aporte anterior.  # noqa: E501

        :param cancellation: The cancellation of this CreditMattress.
        :type cancellation: bool
        """

        self._cancellation = cancellation
