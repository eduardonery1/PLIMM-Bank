# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.installment import Installment  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class InstallmentPurchase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, transaction_id: str=None, card_id: str=None, last_four_digits: str=None, transaction_description: str=None, transaction_date: Object=None, installments: List[Installment]=None):  # noqa: E501
        """InstallmentPurchase - a model defined in Swagger

        :param transaction_id: The transaction_id of this InstallmentPurchase.  # noqa: E501
        :type transaction_id: str
        :param card_id: The card_id of this InstallmentPurchase.  # noqa: E501
        :type card_id: str
        :param last_four_digits: The last_four_digits of this InstallmentPurchase.  # noqa: E501
        :type last_four_digits: str
        :param transaction_description: The transaction_description of this InstallmentPurchase.  # noqa: E501
        :type transaction_description: str
        :param transaction_date: The transaction_date of this InstallmentPurchase.  # noqa: E501
        :type transaction_date: Object
        :param installments: The installments of this InstallmentPurchase.  # noqa: E501
        :type installments: List[Installment]
        """
        self.swagger_types = {
            'transaction_id': str,
            'card_id': str,
            'last_four_digits': str,
            'transaction_description': str,
            'transaction_date': Object,
            'installments': List[Installment]
        }

        self.attribute_map = {
            'transaction_id': 'transactionId',
            'card_id': 'cardId',
            'last_four_digits': 'last_four_digits',
            'transaction_description': 'transactionDescription',
            'transaction_date': 'transactionDate',
            'installments': 'installments'
        }
        self._transaction_id = transaction_id
        self._card_id = card_id
        self._last_four_digits = last_four_digits
        self._transaction_description = transaction_description
        self._transaction_date = transaction_date
        self._installments = installments

    @classmethod
    def from_dict(cls, dikt) -> 'InstallmentPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InstallmentPurchase of this InstallmentPurchase.  # noqa: E501
        :rtype: InstallmentPurchase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this InstallmentPurchase.

        Identificador único da transação representada nessa parcela.  # noqa: E501

        :return: The transaction_id of this InstallmentPurchase.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this InstallmentPurchase.

        Identificador único da transação representada nessa parcela.  # noqa: E501

        :param transaction_id: The transaction_id of this InstallmentPurchase.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def card_id(self) -> str:
        """Gets the card_id of this InstallmentPurchase.

        Identificador único do cartão.  # noqa: E501

        :return: The card_id of this InstallmentPurchase.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id: str):
        """Sets the card_id of this InstallmentPurchase.

        Identificador único do cartão.  # noqa: E501

        :param card_id: The card_id of this InstallmentPurchase.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def last_four_digits(self) -> str:
        """Gets the last_four_digits of this InstallmentPurchase.

        Últimos quatro dígitos do cartão.  # noqa: E501

        :return: The last_four_digits of this InstallmentPurchase.
        :rtype: str
        """
        return self._last_four_digits

    @last_four_digits.setter
    def last_four_digits(self, last_four_digits: str):
        """Sets the last_four_digits of this InstallmentPurchase.

        Últimos quatro dígitos do cartão.  # noqa: E501

        :param last_four_digits: The last_four_digits of this InstallmentPurchase.
        :type last_four_digits: str
        """
        if last_four_digits is None:
            raise ValueError("Invalid value for `last_four_digits`, must not be `None`")  # noqa: E501

        self._last_four_digits = last_four_digits

    @property
    def transaction_description(self) -> str:
        """Gets the transaction_description of this InstallmentPurchase.

        Descrição da transação.  # noqa: E501

        :return: The transaction_description of this InstallmentPurchase.
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description: str):
        """Sets the transaction_description of this InstallmentPurchase.

        Descrição da transação.  # noqa: E501

        :param transaction_description: The transaction_description of this InstallmentPurchase.
        :type transaction_description: str
        """
        if transaction_description is None:
            raise ValueError("Invalid value for `transaction_description`, must not be `None`")  # noqa: E501

        self._transaction_description = transaction_description

    @property
    def transaction_date(self) -> Object:
        """Gets the transaction_date of this InstallmentPurchase.

        Data em que a transação ocorreu.  # noqa: E501

        :return: The transaction_date of this InstallmentPurchase.
        :rtype: Object
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date: Object):
        """Sets the transaction_date of this InstallmentPurchase.

        Data em que a transação ocorreu.  # noqa: E501

        :param transaction_date: The transaction_date of this InstallmentPurchase.
        :type transaction_date: Object
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")  # noqa: E501

        self._transaction_date = transaction_date

    @property
    def installments(self) -> List[Installment]:
        """Gets the installments of this InstallmentPurchase.


        :return: The installments of this InstallmentPurchase.
        :rtype: List[Installment]
        """
        return self._installments

    @installments.setter
    def installments(self, installments: List[Installment]):
        """Sets the installments of this InstallmentPurchase.


        :param installments: The installments of this InstallmentPurchase.
        :type installments: List[Installment]
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")  # noqa: E501

        self._installments = installments
