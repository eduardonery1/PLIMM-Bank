# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DebitOrCreditAmount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, amount: int=None, currency_code: int=986, debit_or_credit: str=None):  # noqa: E501
        """DebitOrCreditAmount - a model defined in Swagger

        :param amount: The amount of this DebitOrCreditAmount.  # noqa: E501
        :type amount: int
        :param currency_code: The currency_code of this DebitOrCreditAmount.  # noqa: E501
        :type currency_code: int
        :param debit_or_credit: The debit_or_credit of this DebitOrCreditAmount.  # noqa: E501
        :type debit_or_credit: str
        """
        self.swagger_types = {
            'amount': int,
            'currency_code': int,
            'debit_or_credit': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency_code': 'currencyCode',
            'debit_or_credit': 'debit_or_credit'
        }
        self._amount = amount
        self._currency_code = currency_code
        self._debit_or_credit = debit_or_credit

    @classmethod
    def from_dict(cls, dikt) -> 'DebitOrCreditAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DebitOrCreditAmount of this DebitOrCreditAmount.  # noqa: E501
        :rtype: DebitOrCreditAmount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self) -> int:
        """Gets the amount of this DebitOrCreditAmount.

        Valor omitindo a vírgula. Por exemplo, R$ 1,23 ficaria \"amount\":123  # noqa: E501

        :return: The amount of this DebitOrCreditAmount.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this DebitOrCreditAmount.

        Valor omitindo a vírgula. Por exemplo, R$ 1,23 ficaria \"amount\":123  # noqa: E501

        :param amount: The amount of this DebitOrCreditAmount.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency_code(self) -> int:
        """Gets the currency_code of this DebitOrCreditAmount.

        Código da moeda, conforme ISO-4217  # noqa: E501

        :return: The currency_code of this DebitOrCreditAmount.
        :rtype: int
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: int):
        """Sets the currency_code of this DebitOrCreditAmount.

        Código da moeda, conforme ISO-4217  # noqa: E501

        :param currency_code: The currency_code of this DebitOrCreditAmount.
        :type currency_code: int
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def debit_or_credit(self) -> str:
        """Gets the debit_or_credit of this DebitOrCreditAmount.

        Define se a transação deve gerar um débito ou um crédito.  # noqa: E501

        :return: The debit_or_credit of this DebitOrCreditAmount.
        :rtype: str
        """
        return self._debit_or_credit

    @debit_or_credit.setter
    def debit_or_credit(self, debit_or_credit: str):
        """Sets the debit_or_credit of this DebitOrCreditAmount.

        Define se a transação deve gerar um débito ou um crédito.  # noqa: E501

        :param debit_or_credit: The debit_or_credit of this DebitOrCreditAmount.
        :type debit_or_credit: str
        """
        allowed_values = ["debit", "credit"]  # noqa: E501
        if debit_or_credit not in allowed_values:
            raise ValueError(
                "Invalid value for `debit_or_credit` ({0}), must be one of {1}"
                .format(debit_or_credit, allowed_values)
            )

        self._debit_or_credit = debit_or_credit
