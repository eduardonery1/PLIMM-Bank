# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class NewAnonymousCardRequestCreatedSuccessfully(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, result_data: AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData=None, card_id: str=None, account_id: str=None):  # noqa: E501
        """NewAnonymousCardRequestCreatedSuccessfully - a model defined in Swagger

        :param result_data: The result_data of this NewAnonymousCardRequestCreatedSuccessfully.  # noqa: E501
        :type result_data: AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData
        :param card_id: The card_id of this NewAnonymousCardRequestCreatedSuccessfully.  # noqa: E501
        :type card_id: str
        :param account_id: The account_id of this NewAnonymousCardRequestCreatedSuccessfully.  # noqa: E501
        :type account_id: str
        """
        self.swagger_types = {
            'result_data': AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData,
            'card_id': str,
            'account_id': str
        }

        self.attribute_map = {
            'result_data': 'resultData',
            'card_id': 'cardId',
            'account_id': 'accountId'
        }
        self._result_data = result_data
        self._card_id = card_id
        self._account_id = account_id

    @classmethod
    def from_dict(cls, dikt) -> 'NewAnonymousCardRequestCreatedSuccessfully':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewAnonymousCardRequestCreatedSuccessfully of this NewAnonymousCardRequestCreatedSuccessfully.  # noqa: E501
        :rtype: NewAnonymousCardRequestCreatedSuccessfully
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result_data(self) -> AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData:
        """Gets the result_data of this NewAnonymousCardRequestCreatedSuccessfully.


        :return: The result_data of this NewAnonymousCardRequestCreatedSuccessfully.
        :rtype: AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData
        """
        return self._result_data

    @result_data.setter
    def result_data(self, result_data: AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData):
        """Sets the result_data of this NewAnonymousCardRequestCreatedSuccessfully.


        :param result_data: The result_data of this NewAnonymousCardRequestCreatedSuccessfully.
        :type result_data: AllOfNewAnonymousCardRequestCreatedSuccessfullyResultData
        """

        self._result_data = result_data

    @property
    def card_id(self) -> str:
        """Gets the card_id of this NewAnonymousCardRequestCreatedSuccessfully.

        Identificador único do cartão. Pode ser usado para verificar o status da requisição e para consultar dados do cartão uma vez que ele tenha sido emitido.  # noqa: E501

        :return: The card_id of this NewAnonymousCardRequestCreatedSuccessfully.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id: str):
        """Sets the card_id of this NewAnonymousCardRequestCreatedSuccessfully.

        Identificador único do cartão. Pode ser usado para verificar o status da requisição e para consultar dados do cartão uma vez que ele tenha sido emitido.  # noqa: E501

        :param card_id: The card_id of this NewAnonymousCardRequestCreatedSuccessfully.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def account_id(self) -> str:
        """Gets the account_id of this NewAnonymousCardRequestCreatedSuccessfully.

        Identificador único da conta que foi criada para esse cartão. inicialmente a conta é anônima e não est´associada a nenhum titular.  # noqa: E501

        :return: The account_id of this NewAnonymousCardRequestCreatedSuccessfully.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this NewAnonymousCardRequestCreatedSuccessfully.

        Identificador único da conta que foi criada para esse cartão. inicialmente a conta é anônima e não est´associada a nenhum titular.  # noqa: E501

        :param account_id: The account_id of this NewAnonymousCardRequestCreatedSuccessfully.
        :type account_id: str
        """

        self._account_id = account_id
